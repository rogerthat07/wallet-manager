/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package password_manager;
import java.awt.Color;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.sql.*;
import javax.swing.*;
/**
 *
 * @author sunnyladdy
 */
public class verifypasswordframe extends javax.swing.JFrame implements mydbvariables {

    /**
     * Creates new form verifypasswordframe
     */
    public static boolean access=false,creditcard=false,paypalcard=false,bankcard=false,idcard=false,passportcard=false,driverslicensecard,taxcard=false;
    public static showcreditcard1 showcredits;
    public static String header="";
    public static showpaypalcard1 showpaypals;
    public static showbankcard1 showbanks;
    public static showidcard1 showidcards;
    public static showtaxcard1 showtaxcards;
    public static showpassportcard1 showpassportcards;
    public static showdriverslicensecard1 showdriverslicensecards;
    public static boolean delete=false,ok=false,unlock = false,lock = false;
    public static boolean securenotes = false;
    public static String actions="";
    public static String idnumber="";
    public static securenotes sec;
    public static String sno="",note="",title="",type="",askforpassword="";
    public static String cardholdername="", cardname="", cardnumber="", securitycode="", expirydate="", issuingbank="", cardcolor="",passwordprotected="";
    public static String login="",password="";
    public static String accountholdername="",routingnumber="",accountnumber="",gender="",dob="",issuedate="",expirydatee="",idcardname="",placeofissue="",state="";
    public static String month[];
    public verifypasswordframe() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        passhash = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        continue_btn = new javax.swing.JButton();
        cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setText("Master Password");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(30, 70, 114, 30);

        passhash.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passhashKeyPressed(evt);
            }
        });
        getContentPane().add(passhash);
        passhash.setBounds(173, 73, 157, 30);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Enter Your Master Password To Access This Secure Data");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(13, 24, 343, 15);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(0, 126, 366, 10);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        continue_btn.setText("Ok");
        continue_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continue_btnActionPerformed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(165, Short.MAX_VALUE)
                .addComponent(continue_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(continue_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 17, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 130, 370, 50);

        setBounds(0, 0, 379, 214);
    }// </editor-fold>//GEN-END:initComponents

    private void passhashKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passhashKeyPressed
        if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER)
        {
            continue_btn.doClick();
        }
    }//GEN-LAST:event_passhashKeyPressed
    
    public void passstring(String idnumber,String sno,String note,String title,String type,String askforpassword)
    {
        sec.idnumber=idnumber;                      
        sec.serialno.setText(sno);
        sec.serialno.disable();
        sec.note.setText(note);
        sec.setTitle(header);
        sec.title.setForeground(Color.BLACK);
        sec.title.setText(title);
        sec.notename.setText(type);
        if(askforpassword.equalsIgnoreCase("true"))
        {
            sec.passwordprotected.setSelected(true);   
        }
        else
        {
            sec.passwordprotected.setSelected(false);       
        }
    }
    
    public void taxstring(showtaxcard1 obj1,String cardnumber,String sno,String idcardname,String note)
    {
        obj1.cardnumber.setText(cardnumber);
        obj1.idcardname.setText(idcardname);
        obj1.sno.setText(sno);
        obj1.sno.disable();
        obj1.topcardname.setText(idcardname);
        obj1.passwordprotected.setSelected(true);
        obj1.usernote.setText(note);
        obj1.securitypass=true;
        obj1.flag = false;
    }
    
    public void idcardstring(showidcard1 obj1,String dobi,String issuedatee,String idcardname,String expirydatee,String cardnumber)
    {
        obj1.dobbox.setText(dobi);
        obj1.issuedatebox.setText(issuedatee);
        obj1.expirydatebox.setText(expirydatee);
        obj1.cardnumber.setText(cardnumber);
        obj1.idcardname.setText(idcardname);
        obj1.sno.setText(sno);
        obj1.sno.disable();
        obj1.topcardname.setText(idcardname);
        if(gender.equals("Male"))
        {
            obj1.malebox.setSelected(true);
        }
        else
        {
            obj1.femalebox.setSelected(true);
        }
        obj1.passwordprotected.setSelected(true);
        obj1.usernote.setText(note);
        obj1.securitypass=true;
        obj1.flag = false;
    }
    
    public void passportstring(showpassportcard1 obj1,String dobi,String issuedatee,String idcardname,String expirydatee,String cardnumber,String placeofissue)
    {
        obj1.dobbox.setText(dobi);
        obj1.issuedatebox.setText(issuedatee);
        obj1.expirydatebox.setText(expirydatee);
        obj1.cardnumber.setText(cardnumber);
        obj1.idcardname.setText(idcardname);
        obj1.sno.setText(sno);
        obj1.placeofissue.setText(placeofissue);
        obj1.sno.disable();
        obj1.topcardname.setText(idcardname);
        if(gender.equals("Male"))
        {
            obj1.malebox.setSelected(true);
        }
        else
        {
            obj1.femalebox.setSelected(true);
        }
        obj1.passwordprotected.setSelected(true);
        obj1.usernote.setText(note);
        obj1.securitypass=true;
        obj1.flag = false;
    }
    
    public void driverslicensestring(showdriverslicensecard1 obj1,String dobi,String issuedatee,String idcardname,String expirydatee,String cardnumber,String state)
    {
        obj1.dobbox.setText(dobi);
        obj1.issuedatebox.setText(issuedatee);
        obj1.expirydatebox.setText(expirydatee);
        obj1.cardnumber.setText(cardnumber);
        obj1.idcardname.setText(idcardname);
        obj1.sno.setText(sno);
        obj1.state.setText(state);
        obj1.sno.disable();
        obj1.topcardname.setText(idcardname);
        if(gender.equals("Male"))
        {
            obj1.malebox.setSelected(true);
        }
        else
        {
            obj1.femalebox.setSelected(true);
        }
        obj1.passwordprotected.setSelected(true);
        obj1.usernote.setText(note);
        obj1.securitypass=true;
        obj1.flag = false;
    }
    
    public void creditstring(showcreditcard1 ob,String noe,String month[],String idnumber,String cardholdername,String cardname,String cardnumber,String securitycode,String expirydate,String issuingbank,String cardcolor,String passwordprotected)
    {
        ob.cardnumber.setText(cardnumber);
        ob.sno.setText(sno);
        ob.sno.disable();
        ob.topcardname.setText(cardname);
        ob.cardholdername.setText(cardholdername);
        ob.cardname.setText(cardname);
        ob.securitycode.setText(securitycode);
        ob.issuingbankname.setText(issuingbank);
        ob.cardcolor.setSelectedItem(cardcolor);
        ob.usernote.setText(noe);
        ob.monthbox.setSelectedItem(month[0]);
        ob.yearbox.setSelectedItem(month[1]);
        if(passwordprotected.equals("true"))
        {
            ob.passwordprotected.setSelected(true);
            ob.cardnumber.setEchoChar((char)0);
            ob.securitycode.setEchoChar((char)0);
            ob.securitypass=true;
        }
        else
        {
            ob.passwordprotected.setSelected(false);
            ob.cardnumber.setEchoChar((char)0);
            ob.securitycode.setEchoChar((char)0);
            ob.securitypass=true;
        }
    }
    
    public void paypalstring(showpaypalcard1 ob,String idnumber,String sno,String cardname,String login,String password,String note,String passwordprotected)
    {
        ob.idnumber=idnumber;
        ob.sno.setText(sno);
        ob.sno.disable();
        ob.topcardname.setText(cardname);
        ob.cardname.setText(cardname);
        ob.login.setText(login);
        ob.password.setText(password);
        ob.usernote.setText(note);
        if(passwordprotected.equals("true"))
        {
            ob.passwordprotected.setSelected(true);
            ob.login.setEchoChar((char)0);
            ob.password.setEchoChar((char)0);
            ob.securitypass=true;
        }
        else
        {
            ob.passwordprotected.setSelected(false);
            ob.login.setEchoChar((char)0);
            ob.password.setEchoChar((char)0);
            ob.securitypass=true;
        }
    }
    
    public void bankstring(showbankcard1 ob,String idnumber,String sno,String cardname,String accountholdername,String accountnumber,String routingnumber,String note,String passwordprotected)
    {
        ob.idnumber=idnumber;
        ob.sno.setText(sno);
        ob.sno.disable();
        ob.topcardname.setText(cardname);
        ob.cardname.setText(cardname);
        ob.accountholdername.setText(accountholdername);
        ob.accountnumber.setText(accountnumber);
        ob.routingnumber.setText(routingnumber);
        ob.usernote.setText(note);
        if(passwordprotected.equals("true"))
        {
            ob.passwordprotected.setSelected(true);
            ob.accountholdername.setEchoChar((char)0);
            ob.routingnumber.setEchoChar((char)0);
            ob.accountnumber.setEchoChar((char)0);
            ob.securitypass=true;
        }
        else
        {
            ob.passwordprotected.setSelected(false);
            ob.accountholdername.setEchoChar((char)0);
            ob.routingnumber.setEchoChar((char)0);
            ob.accountnumber.setEchoChar((char)0);
            ob.securitypass=true;
        }
    }
    
    public void call(String s)
    {
        if(s.equals("Delete"))
        {
            delete = true;
        }
        else if(s.equals("Ok"))
        {
            ok = true;
        }
        else if(s.equals("Click Here to Unlock The Settings"))
        {
           unlock = true; 
        }
        else if(s.equals("Click Here to Lock The Settings"))
        {
            lock = true;
        }
    }
    
    private void continue_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continue_btnActionPerformed
        try
        {
            Connection myconnection = DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);
            try
            {
                String query = "select * from users where id=? and userPass=?";
                PreparedStatement obj = myconnection.prepareStatement(query);
                obj.setString(1, idnumber);
                obj.setString(2, passhash.getText());
                ResultSet obj1 = obj.executeQuery();
                if(obj1.next())
                {
                    dashlane.securitypass = true;
                    this.dispose();
                    if(useraccount1.useraccount == true)
                    {
                        useraccount1.flagvar.setText("true");
                        useraccount1.email.enable();
                        useraccount1.cellphone.enable();
                        useraccount1.useraccount = false;
                        useraccount1.unlock.setText("Click Here to Lock The Settings");
                        useraccount1.email.setCaretPosition(0);
                        useraccount1.cellphone.setCaretPosition(0);
                        //useraccount1.flagvar.setVisible(false);
                        access = true;
                    }
                    else if(securenotes == true)
                    {
                        if(!dashlane.securenote.isVisible())
                        {
                            //dashlane.securenote = sec;
                            dashlane.jDesktopPane1.add(sec);
                            sec.setVisible(true);
                        }
                        else
                        {
                            dashlane.securenote = sec;
                        }
                        if(dashlane.notesflag==true)
                        {
                        passstring(idnumber, sno, note, title, type, askforpassword); 
                        dashlane.notesflag=false;
                        }
                        securenotes = false;
                    }
                    else if(creditcard == true)
                    {
                        showcreditcard1.securitypass = true;
                        if(!dashlane.showcredit.isVisible())
                        {
                            //dashlane.securenote = sec;
                            dashlane.jDesktopPane1.add(showcredits);
                            showcredits.setVisible(true);
                            System.out.println("Not Visible");
                        }
                        else
                        {
                            dashlane.showcredit = showcredits;
                            System.out.println("allready Visible");
                        }
                        if(dashlane.cardflag==true)
                        {
                            creditstring(showcredits, note, month, idnumber, cardholdername, cardname, cardnumber, securitycode, expirydate, issuingbank, cardcolor, passwordprotected);
                            dashlane.showcredit = showcredits;
                            dashlane.cardflag=false;
                        }
                        else if(actions.equalsIgnoreCase("Ok"))
                        {
                            showcreditcard1.ok.doClick();
                        }
                        else if(actions.equalsIgnoreCase("Delete"))
                        {
                            showcreditcard1.Delete_btn.doClick();
                        }
                        actions = "";
                        creditcard = false;
                        dashlane.securitypass = true;
                    }
                    else if(paypalcard==true)
                    {
                        showpaypalcard1.securitypass = true;
                        if(!dashlane.showpaypal.isVisible())
                        {
                            //dashlane.securenote = sec;
                            dashlane.jDesktopPane1.add(showpaypals);
                            showpaypals.setVisible(true);
                            System.out.println("No Visible");
                        }
                        else
                        {
                            dashlane.showpaypal = showpaypals;
                            System.out.println("allready Visible");
                        }
                        if(dashlane.paypalcardflag==true)
                        {
                            paypalstring(showpaypals,idnumber, sno, cardname, login, password, note, passwordprotected);
                            dashlane.showpaypal = showpaypals;
                            dashlane.paypalcardflag=false;
                        }
                        else if(actions.equalsIgnoreCase("Ok"))
                        {
                            showpaypalcard1.ok.doClick();
                        }
                        else if(actions.equalsIgnoreCase("Delete"))
                        {
                            showpaypalcard1.Delete_btn.doClick();
                        }
                        actions = "";
                        paypalcard = false;
                        dashlane.securitypass = true;
                    }
                    else if(bankcard==true)
                    {
                        showbankcard1.securitypass = true;
                        if(!dashlane.showbank.isVisible())
                        {
                            //dashlane.securenote = sec;
                            dashlane.jDesktopPane1.add(showbanks);
                            showbanks.setVisible(true);
                            System.out.println("Not Visible");
                        }
                        else
                        {
                            dashlane.showbank = showbanks;
                            System.out.println("allready Visible");
                        }
                        if(dashlane.bankcardflag==true)
                        {
                            bankstring(showbanks, idnumber, sno, cardname, accountholdername, accountnumber, routingnumber, note, passwordprotected);
                            dashlane.showbank = showbanks;
                            dashlane.bankcardflag=false;
                        }
                        else if(actions.equalsIgnoreCase("Ok"))
                        {
                            showbankcard1.ok.doClick();
                        }
                        else if(actions.equalsIgnoreCase("Delete"))
                        {
                            showbankcard1.Delete_btn.doClick();
                        }
                        actions = "";
                        bankcard = false;
                        dashlane.securitypass = true;
                    }
                    else if(idcard==true)
                    {
                        showidcard1.securitypass = true;
                        if(!dashlane.showidcard.isVisible())
                        {
                            //dashlane.securenote = sec;
                            dashlane.jDesktopPane1.add(showidcards);
                            showidcards.setVisible(true);
                            System.out.println("Not Visible");
                        }
                        else
                        {
                            dashlane.showidcard = showidcards;
                            System.out.println("allready Visible");
                        }
                        if(dashlane.idcardflag==true)
                        {
                            idcardstring(showidcards, dob, issuedate, idcardname, expirydatee, cardnumber);
                            dashlane.showidcard = showidcards;
                            dashlane.idcardflag=false;
                        }
                        else if(actions.equalsIgnoreCase("Ok"))
                        {
                            showidcard1.ok.doClick();
                        }
                        else if(actions.equalsIgnoreCase("Delete"))
                        {
                            showidcard1.Delete_btn.doClick();
                        }
                        actions = "";
                        idcard = false;
                        dashlane.securitypass = true;
                    }
                    else if(passportcard==true)
                    {
                        showpassportcard1.securitypass = true;
                        if(!dashlane.showpassportcard.isVisible())
                        {
                            //dashlane.securenote = sec;
                            dashlane.jDesktopPane1.add(showpassportcards);
                            showpassportcards.setVisible(true);
                            System.out.println("Not Visible");
                        }
                        else
                        {
                            dashlane.showpassportcard = showpassportcards;
                            System.out.println("allready Visible");
                        }
                        if(dashlane.passportcardflag==true)
                        {
                            passportstring(showpassportcards, dob, issuedate, idcardname, expirydatee, cardnumber, placeofissue);
                            dashlane.showpassportcard = showpassportcards;
                            dashlane.passportcardflag=false;
                        }
                        else if(actions.equalsIgnoreCase("Ok"))
                        {
                            showpassportcard1.ok.doClick();
                        }
                        else if(actions.equalsIgnoreCase("Delete"))
                        {
                            showpassportcard1.Delete_btn.doClick();
                        }
                        actions = "";
                        passportcard = false;
                        dashlane.securitypass = true;
                    }
                    else if(driverslicensecard==true)
                    {
                        showdriverslicensecard1.securitypass = true;
                        if(!dashlane.showdriverslicensecard.isVisible())
                        {
                            //dashlane.securenote = sec;
                            dashlane.jDesktopPane1.add(showdriverslicensecards);
                            showdriverslicensecards.setVisible(true);
                            System.out.println("Not Visible");
                        }
                        else
                        {
                            dashlane.showdriverslicensecard = showdriverslicensecards;
                            System.out.println("allready Visible");
                        }
                        if(dashlane.driverslicensecardflag==true)
                        {
                            driverslicensestring(showdriverslicensecards, dob, issuedate, idcardname, expirydatee, cardnumber, state);
                            dashlane.showdriverslicensecard = showdriverslicensecards;
                            dashlane.driverslicensecardflag=false;
                        }
                        else if(actions.equalsIgnoreCase("Ok"))
                        {
                            showpassportcard1.ok.doClick();
                        }
                        else if(actions.equalsIgnoreCase("Delete"))
                        {
                            showpassportcard1.Delete_btn.doClick();
                        }
                        actions = "";
                        driverslicensecard = false;
                        dashlane.securitypass = true;
                    }
                    else if(taxcard==true)
                    {
                        showtaxcard1.securitypass = true;
                        if(!dashlane.showtaxcard.isVisible())
                        {
                            //dashlane.securenote = sec;
                            dashlane.jDesktopPane1.add(showtaxcards);
                            showtaxcards.setVisible(true);
                            System.out.println("Not Visible");
                        }
                        else
                        {
                            dashlane.showtaxcard = showtaxcards;
                            System.out.println("allready Visible");
                        }
                        if(dashlane.taxcardflag==true)
                        {
                            taxstring(showtaxcards, cardnumber, sno, idcardname, note);
                            dashlane.showtaxcard = showtaxcards;
                            dashlane.taxcardflag=false;
                        }
                        else if(actions.equalsIgnoreCase("Ok"))
                        {
                            showtaxcard1.ok.doClick();
                        }
                        else if(actions.equalsIgnoreCase("Delete"))
                        {
                            showtaxcard1.Delete_btn.doClick();
                        }
                        actions = "";
                        taxcard = false;
                        dashlane.securitypass = true;
                    }
                    else
                    {
                        showpass.flagvar.setText("true");
                        showpass.securitypass = true;
                        access = false;
                        //dashlane.flagvar.setVisible(false);
                        showpass.userpassword.setForeground(Color.BLACK);
                        if(actions.equals("Delete"))
                        {
                            showpass.Delete_btn.doClick();
                        }
                        else if(actions.equals("Ok"))
                        {
                            showpass.ok.doClick();
                        }
                        else
                        {
                            showpass.userpassword.setCaretPosition(0);
                        }
                        actions="";
                    }
                    actions="";
                    access=false;
                    bankcard=false;
                }
                else
                {
                    showpass.securitypass = false;
                    dashlane.securitypass = false;
                    access = false;
                    //dashlane.showingDetailss.setVisible(false);
                    passhash.setText("");
                    JOptionPane.showMessageDialog(this, "Wrong Password!!!");
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                e.printStackTrace();
            }
            finally
            {
                myconnection.close();
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_continue_btnActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        this.dispose();
        dashlane.flag = false;
        showpass.flag = false;
    }//GEN-LAST:event_cancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(verifypasswordframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(verifypasswordframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(verifypasswordframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(verifypasswordframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new verifypasswordframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton cancel;
    private javax.swing.JButton continue_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPasswordField passhash;
    // End of variables declaration//GEN-END:variables
}
