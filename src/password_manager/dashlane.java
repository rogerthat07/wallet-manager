/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package password_manager;

import java.awt.Color;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;
import static password_manager.mydbvariables.PASSWORD;
import static password_manager.mydbvariables.PATH;
import static password_manager.mydbvariables.PLACE;
import static password_manager.mydbvariables.USERNAME;
import static password_manager.usernewdetail.photo;

/**
 *
 * @author sunnyladdy
 */
public class dashlane extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    //Boolean notes,pass,security;
    public static String idnumber;
    public static AddPassCategory addcategory = new AddPassCategory();
    public static useraccount1 useraccountchange = new useraccount1();
    public static passgen passwordgenerator = new passgen();
    public static int q=0;
    public static String askforpassword = "true";
    public static boolean passwordpanelsearch = false,securitypanelweaksearch =false,securitypanelstrongsearch= false,securenotessearch = false,passportcardflag=false,driverslicensecardflag=false,taxcardflag=false;
    Object obx;
    public static boolean securitypass = false;
    public static boolean flag = false;
    public static showcreditcard1 showcredit = new showcreditcard1();
    public static showpaypalcard1 showpaypal = new showpaypalcard1();
    public static showbankcard1 showbank = new showbankcard1();
    public static showidcard1 showidcard = new showidcard1();
    public static showdriverslicensecard1 showdriverslicensecard = new showdriverslicensecard1();
    public static showpassportcard1 showpassportcard = new showpassportcard1();
    public static showtaxcard1 showtaxcard = new showtaxcard1();
    public boolean pass,notes,security,personalinfo,payments,ids,receipts;
    showpass sh = new showpass();
    public static boolean notesflag = false,cardflag = false,paypalcardflag=false,bankcardflag=false,idcardflag=false;
    public static securenotes securenote = new securenotes();
    
    public dashlane() {
        initComponents();
        search.setCaretPosition(0);
//        security = true;
        pass = false;
        notes = false;
        security = false;
        personalinfo=false;
        payments=false;
        ids=false;
        receipts=false;
        securitybox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/security.png")));
        passbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/passwordbox_icon.png")));
        securenotesbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/securenotes.png")));
        securitypanel.setVisible(true);
        passwordpanel.setVisible(false);
        securenotespanel.setVisible(false);
        personalinfopanel.setVisible(false);
        paymentspanel.setVisible(false);
        idspanel.setVisible(false);
        //hidepassin.setVisible(false);
        run();
    }
    
    public void run()
    {
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        personalinfopanel = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTable10 = new javax.swing.JTable();
        securitypanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        search1 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        search2 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        passwordpanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        search = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        securenotespanel = new javax.swing.JPanel();
        addnewnote = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        search3 = new javax.swing.JTextField();
        paymentspanel = new javax.swing.JPanel();
        addnewcard = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        search4 = new javax.swing.JTextField();
        jButton14 = new javax.swing.JButton();
        idspanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        addnewcard1 = new javax.swing.JComboBox<>();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable8 = new javax.swing.JTable();
        search5 = new javax.swing.JTextField();
        jButton15 = new javax.swing.JButton();
        search6 = new javax.swing.JTextField();
        jButton16 = new javax.swing.JButton();
        recieptspanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jButton13 = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable9 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        receiptspanelbox = new javax.swing.JButton();
        idspanelbox = new javax.swing.JButton();
        paymentsbox = new javax.swing.JButton();
        passbox = new javax.swing.JButton();
        securitybox = new javax.swing.JButton();
        securenotesbox = new javax.swing.JButton();
        personalinfobox = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem6 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dashlane");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/addnew.png"))); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jTable10.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sno", "Name", "Email Address", "Email Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable10MouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(jTable10);

        javax.swing.GroupLayout personalinfopanelLayout = new javax.swing.GroupLayout(personalinfopanel);
        personalinfopanel.setLayout(personalinfopanelLayout);
        personalinfopanelLayout.setHorizontalGroup(
            personalinfopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personalinfopanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(personalinfopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(personalinfopanelLayout.createSequentialGroup()
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE))
                .addContainerGap())
        );
        personalinfopanelLayout.setVerticalGroup(
            personalinfopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personalinfopanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        securitypanel.setBackground(new java.awt.Color(255, 255, 255));

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jPanel2.setLayout(null);

        jTable3.setAutoCreateRowSorter(true);
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "sno", "Website", "Login", "Strength", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.getTableHeader().setReorderingAllowed(false);
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jPanel2.add(jScrollPane3);
        jScrollPane3.setBounds(10, 50, 633, 492);

        search1.setForeground(new java.awt.Color(205, 205, 205));
        search1.setText("Search");
        search1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                search1MouseClicked(evt);
            }
        });
        search1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                search1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search1KeyReleased(evt);
            }
        });
        jPanel2.add(search1);
        search1.setBounds(283, 9, 72, 30);

        jButton4.setBackground(new java.awt.Color(37, 180, 30));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Search");
        jButton4.setBorder(null);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4);
        jButton4.setBounds(373, 9, 72, 30);

        jTabbedPane1.addTab("Weak Passwords", jPanel2);

        jPanel3.setLayout(null);

        jTable4.setAutoCreateRowSorter(true);
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "sno", "Website", "Login", "Strength", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable4.getTableHeader().setReorderingAllowed(false);
        jTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable4MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable4);

        jPanel3.add(jScrollPane4);
        jScrollPane4.setBounds(10, 50, 630, 480);

        search2.setForeground(new java.awt.Color(205, 205, 205));
        search2.setText("Search");
        search2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                search2MouseClicked(evt);
            }
        });
        search2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                search2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search2KeyReleased(evt);
            }
        });
        jPanel3.add(search2);
        search2.setBounds(280, 10, 72, 30);

        jButton5.setBackground(new java.awt.Color(37, 180, 30));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Search");
        jButton5.setBorder(null);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton5);
        jButton5.setBounds(370, 10, 72, 30);

        jTabbedPane1.addTab("Strong Passwords", jPanel3);

        javax.swing.GroupLayout securitypanelLayout = new javax.swing.GroupLayout(securitypanel);
        securitypanel.setLayout(securitypanelLayout);
        securitypanelLayout.setHorizontalGroup(
            securitypanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(securitypanelLayout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        securitypanelLayout.setVerticalGroup(
            securitypanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(securitypanelLayout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        passwordpanel.setBackground(new java.awt.Color(255, 255, 255));
        passwordpanel.setLayout(null);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "sno", "Website", "Login", "Strength", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        passwordpanel.add(jScrollPane1);
        jScrollPane1.setBounds(10, 60, 640, 520);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/addnew.png"))); // NOI18N
        jButton1.setContentAreaFilled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        passwordpanel.add(jButton1);
        jButton1.setBounds(37, 20, 72, 23);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/passwordchanger.png"))); // NOI18N
        passwordpanel.add(jButton2);
        jButton2.setBounds(142, 20, 133, 23);

        search.setForeground(new java.awt.Color(205, 205, 205));
        search.setText("Search");
        search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchMouseClicked(evt);
            }
        });
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });
        passwordpanel.add(search);
        search.setBounds(290, 20, 72, 23);

        jButton3.setBackground(new java.awt.Color(37, 180, 30));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Search");
        jButton3.setBorder(null);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        passwordpanel.add(jButton3);
        jButton3.setBounds(380, 20, 72, 23);

        securenotespanel.setLayout(null);

        addnewnote.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Add New", "Blank Note", "Application Password", "Database", "Finance", "Legal Document", "Memberships", "Server Info", "Software License", "Wifi Password" }));
        addnewnote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addnewnoteActionPerformed(evt);
            }
        });
        securenotespanel.add(addnewnote);
        addnewnote.setBounds(10, 11, 126, 33);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sno", "Type", "Title"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        securenotespanel.add(jScrollPane2);
        jScrollPane2.setBounds(10, 55, 627, 513);

        jButton6.setBackground(new java.awt.Color(37, 180, 30));
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Search");
        jButton6.setBorder(null);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        securenotespanel.add(jButton6);
        jButton6.setBounds(323, 11, 72, 30);

        search3.setForeground(new java.awt.Color(205, 205, 205));
        search3.setText("Search");
        search3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                search3MouseClicked(evt);
            }
        });
        search3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                search3KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search3KeyReleased(evt);
            }
        });
        securenotespanel.add(search3);
        search3.setBounds(233, 11, 72, 30);

        paymentspanel.setBackground(new java.awt.Color(255, 255, 255));

        addnewcard.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Add New", "Credit/Debit Card", "Paypal Account", "Bank Account" }));
        addnewcard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addnewcardActionPerformed(evt);
            }
        });

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sno", "Name", "Color"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable5MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTable5);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Credit/Debit Cards");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Paypal Accounts");

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sno", "Name", "Login"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable6MouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(jTable6);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Bank Accounts");

        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "sno", "Name", "Bank Name", "Account Hol. No."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable7MouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(jTable7);

        search4.setForeground(new java.awt.Color(205, 205, 205));
        search4.setText("Search");
        search4.setToolTipText("Enter Cardname Here");
        search4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                search4MouseClicked(evt);
            }
        });
        search4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search4ActionPerformed(evt);
            }
        });
        search4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                search4KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search4KeyReleased(evt);
            }
        });

        jButton14.setBackground(new java.awt.Color(37, 180, 30));
        jButton14.setForeground(new java.awt.Color(255, 255, 255));
        jButton14.setText("Search");
        jButton14.setBorder(null);
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paymentspanelLayout = new javax.swing.GroupLayout(paymentspanel);
        paymentspanel.setLayout(paymentspanelLayout);
        paymentspanelLayout.setHorizontalGroup(
            paymentspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentspanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paymentspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
                    .addComponent(jScrollPane6)
                    .addComponent(jScrollPane7)
                    .addGroup(paymentspanelLayout.createSequentialGroup()
                        .addGroup(paymentspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(paymentspanelLayout.createSequentialGroup()
                                .addComponent(addnewcard, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(107, 107, 107)
                                .addComponent(search4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        paymentspanelLayout.setVerticalGroup(
            paymentspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentspanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paymentspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(paymentspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(addnewcard, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(paymentspanelLayout.createSequentialGroup()
                            .addComponent(search4)
                            .addGap(2, 2, 2))))
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        addnewcard1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Add New", "ID Card", "Passport", "Driver's License", "Tax Numbers" }));
        addnewcard1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addnewcard1ActionPerformed(evt);
            }
        });

        jTable8.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sno", "Card Name", "Card Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable8MouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(jTable8);

        search5.setForeground(new java.awt.Color(205, 205, 205));
        search5.setText("Search");
        search5.setToolTipText("Enter Cardname Here");
        search5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                search5MouseClicked(evt);
            }
        });
        search5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search5ActionPerformed(evt);
            }
        });
        search5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                search5KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search5KeyReleased(evt);
            }
        });

        jButton15.setBackground(new java.awt.Color(37, 180, 30));
        jButton15.setForeground(new java.awt.Color(255, 255, 255));
        jButton15.setText("Search");
        jButton15.setBorder(null);
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        search6.setForeground(new java.awt.Color(205, 205, 205));
        search6.setText("Search");
        search6.setToolTipText("Enter Cardname Here");
        search6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                search6MouseClicked(evt);
            }
        });
        search6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search6ActionPerformed(evt);
            }
        });
        search6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                search6KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search6KeyReleased(evt);
            }
        });

        jButton16.setBackground(new java.awt.Color(37, 180, 30));
        jButton16.setForeground(new java.awt.Color(255, 255, 255));
        jButton16.setText("Search");
        jButton16.setBorder(null);
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(addnewcard1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(search6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(223, 223, 223)
                    .addComponent(search5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(223, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addnewcard1, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(search6)
                    .addComponent(jButton16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(286, 286, 286)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(search5))
                    .addGap(287, 287, 287)))
        );

        javax.swing.GroupLayout idspanelLayout = new javax.swing.GroupLayout(idspanel);
        idspanel.setLayout(idspanelLayout);
        idspanelLayout.setHorizontalGroup(
            idspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        idspanelLayout.setVerticalGroup(
            idspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/addnew.png"))); // NOI18N
        jButton13.setContentAreaFilled(false);
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jTable9.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sno", "Date", "Currency", "Price", "Place/Website"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable9MouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(jTable9);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout recieptspanelLayout = new javax.swing.GroupLayout(recieptspanel);
        recieptspanel.setLayout(recieptspanelLayout);
        recieptspanelLayout.setHorizontalGroup(
            recieptspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        recieptspanelLayout.setVerticalGroup(
            recieptspanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jDesktopPane1.setLayer(personalinfopanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(securitypanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(passwordpanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(securenotespanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(paymentspanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(idspanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(recieptspanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addComponent(passwordpanel, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE)
                .addGap(0, 0, 0))
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(securitypanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(securenotespanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(personalinfopanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(paymentspanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                    .addComponent(idspanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                    .addComponent(recieptspanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addComponent(passwordpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(securitypanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(securenotespanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE))
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(personalinfopanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                    .addComponent(paymentspanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(idspanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(recieptspanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jDesktopPane1);
        jDesktopPane1.setBounds(210, 0, 660, 590);

        jPanel1.setLayout(null);

        receiptspanelbox.setForeground(new java.awt.Color(255, 255, 255));
        receiptspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/receiptspanelbox.png"))); // NOI18N
        receiptspanelbox.setText("Secure Notes");
        receiptspanelbox.setBorder(null);
        receiptspanelbox.setContentAreaFilled(false);
        receiptspanelbox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                receiptspanelboxMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                receiptspanelboxMouseExited(evt);
            }
        });
        receiptspanelbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiptspanelboxActionPerformed(evt);
            }
        });
        jPanel1.add(receiptspanelbox);
        receiptspanelbox.setBounds(0, 270, 210, 30);

        idspanelbox.setForeground(new java.awt.Color(255, 255, 255));
        idspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/idspanel_icon.png"))); // NOI18N
        idspanelbox.setText("Secure Notes");
        idspanelbox.setBorder(null);
        idspanelbox.setContentAreaFilled(false);
        idspanelbox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                idspanelboxMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                idspanelboxMouseExited(evt);
            }
        });
        idspanelbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idspanelboxActionPerformed(evt);
            }
        });
        jPanel1.add(idspanelbox);
        idspanelbox.setBounds(0, 240, 210, 30);

        paymentsbox.setForeground(new java.awt.Color(255, 255, 255));
        paymentsbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/payments.png"))); // NOI18N
        paymentsbox.setText("Secure Notes");
        paymentsbox.setBorder(null);
        paymentsbox.setContentAreaFilled(false);
        paymentsbox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                paymentsboxMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                paymentsboxMouseExited(evt);
            }
        });
        paymentsbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentsboxActionPerformed(evt);
            }
        });
        jPanel1.add(paymentsbox);
        paymentsbox.setBounds(0, 210, 210, 30);

        passbox.setForeground(new java.awt.Color(255, 255, 255));
        passbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/passwordbox_icon.png"))); // NOI18N
        passbox.setText("Passwords");
        passbox.setBorder(null);
        passbox.setContentAreaFilled(false);
        passbox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                passboxMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                passboxMouseExited(evt);
            }
        });
        passbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passboxActionPerformed(evt);
            }
        });
        jPanel1.add(passbox);
        passbox.setBounds(0, 40, 210, 30);

        securitybox.setForeground(new java.awt.Color(255, 255, 255));
        securitybox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/security.png"))); // NOI18N
        securitybox.setText("Security Dashboard");
        securitybox.setBorder(null);
        securitybox.setContentAreaFilled(false);
        securitybox.setPreferredSize(new java.awt.Dimension(293, 40));
        securitybox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                securityboxMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                securityboxMouseExited(evt);
            }
        });
        securitybox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                securityboxActionPerformed(evt);
            }
        });
        jPanel1.add(securitybox);
        securitybox.setBounds(0, 70, 210, 30);

        securenotesbox.setForeground(new java.awt.Color(255, 255, 255));
        securenotesbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/securenotes.png"))); // NOI18N
        securenotesbox.setText("Secure Notes");
        securenotesbox.setBorder(null);
        securenotesbox.setContentAreaFilled(false);
        securenotesbox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                securenotesboxMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                securenotesboxMouseExited(evt);
            }
        });
        securenotesbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                securenotesboxActionPerformed(evt);
            }
        });
        jPanel1.add(securenotesbox);
        securenotesbox.setBounds(0, 100, 210, 30);

        personalinfobox.setForeground(new java.awt.Color(255, 255, 255));
        personalinfobox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/personalinfo.png"))); // NOI18N
        personalinfobox.setText("Secure Notes");
        personalinfobox.setBorder(null);
        personalinfobox.setContentAreaFilled(false);
        personalinfobox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                personalinfoboxMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                personalinfoboxMouseExited(evt);
            }
        });
        personalinfobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personalinfoboxActionPerformed(evt);
            }
        });
        jPanel1.add(personalinfobox);
        personalinfobox.setBounds(0, 180, 210, 30);

        jLabel3.setFont(new java.awt.Font("Yu Gothic", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("PASSWORD MANAGER");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(20, 10, 170, 30);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("WALLET");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(20, 140, 150, 30);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/background.png"))); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(400, 400));
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 220, 590);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 210, 590);

        jMenu1.setText("User");

        jMenuItem8.setText("Account");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuItem1.setText("Logout");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tools");
        jMenu2.add(jSeparator2);

        jMenuItem3.setText("Add Password Categories");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem5.setText("Password Changer");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);
        jMenu2.add(jSeparator3);

        jMenuItem6.setText("Edit Receipt Categories");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);
        jMenu2.add(jSeparator4);

        jMenuItem7.setText("Password Generator");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        setSize(new java.awt.Dimension(873, 643));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        addnewpassword obj = new addnewpassword();
        jDesktopPane1.add(obj);
        obj.idnumber= idnumber;
        obj.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if(!sh.isVisible())
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "select * from details where sno=?";
                    String ssno = jTable1.getValueAt(jTable1.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,website,login,password,category,name,note,secondarylogin,email;
                    if(result.next())
                    {
                        email = result.getString("email");
                        website = result.getString("website");
                        login = result.getString("login");
                        name = result.getString("name");
                        note = result.getString("note");
                        secondarylogin = result.getString("secondarylogin");
                        sno = result.getString("sno");
                        password = result.getString("password");
                        category = result.getString("category");
                        askforpassword = result.getString("passwordprotected");
                        int index = Integer.parseInt(category);
                        int or;
                        if(index==0)
                        {
                            or = index;
                        }
                        else
                        {
                            or = index-1;
                        }
                        showpass obj = new showpass();
                        sh = obj;
                        jDesktopPane1.add(obj);
                        obj.setVisible(true);
                        obj.idnumber=idnumber;
                        obj.setTitle(login);
                        obj.userlogin.setText(login);
                        obj.websitename.setText(website);
                        obj.serialno.setText(sno);
                        obj.userpassword.setText(password);
                        obj.userwebsite.setText(website);
                        obj.webname.setText(website);
                        obj.usernote.setText(note);
                        obj.userseclogin.setText(secondarylogin);
                        obj.useremail.setText(email);
                        try
                        {
                            obj.usercategory.setSelectedIndex(or);
                        }
                        catch(Exception e)
                        {
                            JOptionPane.showMessageDialog(this, "You Have Deleted That Category...");
                            obj.usercategory.setSelectedItem("Other");
                        }
                        if(askforpassword.equalsIgnoreCase("true"))
                        {
                            obj.passwordprotected.setSelected(true);
                        }
                        else
                        {
                            obj.passwordprotected.setSelected(false);
                        }
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            obj.showpassin.setVisible(false);
                            obj.hidepassin.setVisible(false);
                        }
                        else
                        {
                            obj.hidepassin.setVisible(false);
                            obj.showpassin.setVisible(true);
                            obj.userpassword.enable();
                            obj.userpassword.setForeground(Color.BLACK);
                        }
                        obj.flag = false;
                        showpass.serialno.disable();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this,"NO Records Found!!!");
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
            }
        }
        else   
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "select * from details where sno=?";
                    String ssno = jTable1.getValueAt(jTable1.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,website,login,password,category,name,note,secondarylogin,email;
                    if(result.next())
                    {
                        email = result.getString("email");
                        website = result.getString("website");
                        login = result.getString("login");
                        name = result.getString("name");
                        note = result.getString("note");
                        secondarylogin = result.getString("secondarylogin");
                        sno = result.getString("sno");
                        password = result.getString("password");
                        category = result.getString("category");
                        int index = Integer.parseInt(category);
                        int or;
                        if(index==0)
                        {
                            or = index;
                        }
                        else
                        {
                            or = index-1;
                        }
                        sh.idnumber=idnumber;
                        sh.userlogin.setText(login);
                        sh.websitename.setText(website);
                        sh.serialno.setText(sno);
                        sh.userpassword.disable();
                        sh.userpassword.setText(password);
                        sh.userwebsite.setText(website);
                        sh.webname.setText(website);
                        sh.usernote.setText(note);
                        sh.userseclogin.setText(secondarylogin);
                        sh.useremail.setText(email);
                        try
                        {
                            sh.usercategory.setSelectedIndex(or);
                        }
                        catch(Exception e)
                        {
                            JOptionPane.showMessageDialog(this, "You Have Deleted That Category...");
                            sh.usercategory.setSelectedItem("Other");
                        }
                        sh.showpassin.setVisible(false);
                        sh.hidepassin.setVisible(false);
                        sh.flag = false;
                        showpass.serialno.disable();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this,"NO Records Found!!!");
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void passboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passboxActionPerformed
        pass = true;
        payments = false;
        personalinfo=false;
        notes=false;
        security = false;
        ids = false;
        receipts = false;
        passbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/pass2.png")));
        securitybox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/security.png")));
        securenotesbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/securenotes.png")));
        personalinfobox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/personalinfo.png")));
        paymentsbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/payments.png")));
        idspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/idspanel_icon.png")));
        receiptspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/receiptspanelbox.png")));
        passwordpanel.setVisible(true);
        personalinfopanel.setVisible(false);
        securitypanel.setVisible(false);
        idspanel.setVisible(false);
        securenotespanel.setVisible(false);
        paymentspanel.setVisible(false);
        recieptspanel.setVisible(false);
        try
        {
            Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
            try
            {
                String query = "select * from details where id=?";
                PreparedStatement mystatement = myconnection.prepareStatement(query);
                mystatement.setString(1, idnumber);
                ResultSet result = mystatement.executeQuery();
                DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
                String sno,website,login,password,category;
                if(result.next())
                {
                    mymodel.setRowCount(0);
                    do
                    {
                    jTable1.setVisible(true);
                    website = result.getString("website");
                    login = result.getString("login");
                    sno = result.getString("sno");
                    password = result.getString("password");
                    String passwordStrength = "";
                    if(password.length()<=9)
                    {
                        passwordStrength = "12%";
                    }
                    else if(password.length()<=18)
                    {
                        passwordStrength = "45%";
                    }
                    else if(password.length()<=23)
                    {
                        passwordStrength = "88%";
                    }
                    else
                    {
                        passwordStrength = "100%";
                    }
                    category = result.getString("category");
                    Object[] s = new Object[]{sno,website,login,passwordStrength,category};
                    mymodel.addRow(s);
                    }
                    while(result.next());
                }
                else
                {
                    jTable1.setVisible(false);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
            }
            finally
            {
                myconnection.close();
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
        }
    }//GEN-LAST:event_passboxActionPerformed

    private void passboxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passboxMouseEntered
        if(pass!=true)
        {
             passbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/focusedpassword.png")));
        }
    }//GEN-LAST:event_passboxMouseEntered

    private void passboxMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passboxMouseExited
        if(pass!=true)
        {
            passbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/passwordbox_icon.png")));
        }
    }//GEN-LAST:event_passboxMouseExited

    private void securityboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_securityboxActionPerformed
        security = true;
        pass = false;
        payments = false;
        notes = false;
        personalinfo = false;
        ids = false;
        receipts = false;
        securitybox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/security2.png")));
        passbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/passwordbox_icon.png")));
        securenotesbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/securenotes.png")));
        personalinfobox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/personalinfo.png")));
        paymentsbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/payments.png")));
        idspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/idspanel_icon.png")));
        receiptspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/receiptspanelbox.png")));
        securitypanel.setVisible(true);
        passwordpanel.setVisible(false);
        recieptspanel.setVisible(false);
        securenotespanel.setVisible(false);
        personalinfopanel.setVisible(false);
        idspanel.setVisible(false);
        paymentspanel.setVisible(false);
        securitypanelweaksearch = true;
        jTabbedPane1.setSelectedIndex(0);
        jButton4.doClick();
        jButton5.doClick();   
    }//GEN-LAST:event_securityboxActionPerformed

    private void securityboxMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_securityboxMouseExited
        if(security!=true)
        {
            securitybox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/security.png")));
        }
    }//GEN-LAST:event_securityboxMouseExited

    private void securityboxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_securityboxMouseEntered
        if(security!=true)
        {
            securitybox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/focusedsecurity.png")));
        }
    }//GEN-LAST:event_securityboxMouseEntered

    private void securenotesboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_securenotesboxActionPerformed
        notes = true;
        pass = false;
        security = false;
        payments = false;
        personalinfo=false;
        ids = false;
        receipts = false;
        securenotesbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/selectedsecnotes.png")));
        passbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/passwordbox_icon.png")));
        securitybox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/security.png")));
        personalinfobox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/personalinfo.png")));
        paymentsbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/payments.png")));
        idspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/idspanel_icon.png")));
        receiptspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/receiptspanelbox.png")));
        securitypanel.setVisible(false);
        passwordpanel.setVisible(false);
        securenotespanel.setVisible(true);
        personalinfopanel.setVisible(false);
        recieptspanel.setVisible(false);
        idspanel.setVisible(false);
        paymentspanel.setVisible(false);
        searchnotes("");
    }//GEN-LAST:event_securenotesboxActionPerformed

    private void securenotesboxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_securenotesboxMouseEntered
        if(notes!=true)
        {
            securenotesbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/focusedsecurenotes.png")));
        }
    }//GEN-LAST:event_securenotesboxMouseEntered

    private void securenotesboxMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_securenotesboxMouseExited
        if(notes!=true)
        {
            securenotesbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/securenotes.png")));
        }
    }//GEN-LAST:event_securenotesboxMouseExited

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(this, "Logging out...\nThankyou For using this App... :)");
        this.dispose();
        Login obj = new Login();
        obj.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        if(!useraccountchange.isVisible())
        {
            useraccount1 obj = new useraccount1();
            jDesktopPane1.add(obj);
            useraccountchange = obj;
            obj.setVisible(true);
            obj.idnumber = idnumber;
            try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);
                    try
                    {
                        String qu = "select * from users where id=?";
                        PreparedStatement mystatement = myconnection.prepareStatement(qu);
                        mystatement.setString(1,idnumber);
                        //System.out.println("idnumber : "+idnumber);
                        ResultSet result = mystatement.executeQuery();
                        if(result.next())
                        {
                            obj.emailbox.setText(result.getString("userEmail"));
                            obj.email.setText(result.getString("userEmail"));
                            obj.cellphone.setText(result.getString("phoneNo"));
                        }
                        else
                        {
                            //JOptionPane.showMessageDialog(this, "Error in Current Password..");
                        }
                    }
                    catch(Exception e)
                    {
                        JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                }
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    public void search(String sgh)
    {
                try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                    try
                    {
                        String query = "Select * from details where login like ? and id=?";
                        PreparedStatement mystatement = myconnection.prepareStatement(query);
                        mystatement.setString(1,"%"+sgh+"%");
                        mystatement.setString(2,dashlane.idnumber);
                        //System.out.println("query : "+mystatement.toString());
                        ResultSet myresult = mystatement.executeQuery();
                        DefaultTableModel mymodel;
                        boolean weak = false,strong = false;
                        if(passwordpanelsearch == true)
                        {
                            mymodel = (DefaultTableModel)jTable1.getModel();
                        }
                        else if(securitypanelweaksearch == true)
                        {
                            mymodel = (DefaultTableModel)jTable3.getModel();
                            weak = true;
                            strong = false;
                        }
                        else
                        {
                            strong = true;
                            weak = false;
                            mymodel = (DefaultTableModel)jTable4.getModel();
                        }
                        int serialnumber=0;
                        String website,login,sno,category,password;
                        if(myresult.next())
                        {
                            mymodel.setRowCount(0);
                            do
                            {
                                jTable1.setVisible(true);
                                website = myresult.getString("website");
                                login = myresult.getString("login");
                                sno = myresult.getString("sno");
                                password = myresult.getString("password");
                                int passwordStrength = 0;
                                if(password.length()<=4)
                                {
                                    passwordStrength = 12;
                                }
                                else if(password.length()<=10)
                                {
                                    passwordStrength = 45;
                                }
                                else if(password.length()<=19)
                                {
                                    passwordStrength = 88;
                                }
                                else
                                {
                                    passwordStrength = 100;
                                }
                                category = myresult.getString("category");
                                
                                if(passwordpanelsearch == true)
                                {
                                    Object[] s;
                                    s = new Object[]{sno,website,login,passwordStrength,category};
                                    mymodel.addRow(s);
                                }
                                else if(securitypanelweaksearch == true  && passwordStrength<=45)
                                {
                                    Object[] s;
                                    s = new Object[]{sno,website,login,passwordStrength,category};
                                    mymodel.addRow(s);
                                }
                                else if(securitypanelstrongsearch == true  && passwordStrength>=88)
                                {
                                    Object[] s;
                                    s = new Object[]{sno,website,login,passwordStrength,category};
                                    mymodel.addRow(s);
                                }
                            }
                            while(myresult.next());
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "No Records Found!!!");
                        }
                    }
                    catch(Exception e)
                    {
                        JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
                }
    }
    
    public void searchnotes(String sgh)
    {
        try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                    try
                    {
                        String query = "Select * from securenotes where title like ? and id=?";
                        PreparedStatement mystatement = myconnection.prepareStatement(query);
                        mystatement.setString(1,"%"+sgh+"%");
                        mystatement.setString(2,dashlane.idnumber);
                        //System.out.println("query : "+mystatement.toString());
                        ResultSet myresult = mystatement.executeQuery();
                        DefaultTableModel mymodel;
                        mymodel = (DefaultTableModel) jTable2.getModel();
                        if(myresult.next())
                        {
                            mymodel.setRowCount(0);
                            do
                            {
                                mymodel.addRow(new Object[]{myresult.getString("sno"),myresult.getString("type"),myresult.getString("title")});
                            }
                            while(myresult.next());
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "No Records Found!!!");
                        }
                    }
                    catch(Exception e)
                    {
                        JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
                }
    }
    
    public void searchcard(String sgh,javax.swing.JTable table,String dbtable)
    {
        try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                    try
                    {
                        String query = "Select * from "+dbtable+" where cardname like ? and id=?";
                        PreparedStatement mystatement = myconnection.prepareStatement(query);
                        //mystatement.setString(1, dbtable);
                        mystatement.setString(1,"%"+sgh+"%");
                        mystatement.setString(2,dashlane.idnumber);
                        //System.out.println("query : "+mystatement.toString());
                        ResultSet myresult = mystatement.executeQuery();
                        DefaultTableModel mymodel;
                        String sno,cardholdername, cardname, cardnumber, securitycode, expirydate, issuingbank, cardcolor,login;
                        String id, accountholdername, routingnumber, accountnumber, bankname,cardtype;
                        boolean table5=false,table6=false,table7=false,table8=false;
                        mymodel = (DefaultTableModel) table.getModel();
                        if(dbtable.equals("creditcards"))
                        {
                            table5=true;
                            table6=false;
                            table7=false;
                            table8=false;
                        }
                        else if(dbtable.equals("paypalcards"))
                        {
                            table5=false;
                            table6=true;
                            table7=false;
                            table8=false;
                        }
                        else if(dbtable.equals("bankcards"))
                        {
                            table5=false;
                            table6=false;
                            table7=true;
                            table8=false;
                        }
                        else if(dbtable.equals("idcards"))
                        {
                            table5=false;
                            table6=false;
                            table7=false;
                            table8=true;
                        }
                        table.removeRowSelectionInterval(0, 0);
                        if(myresult.next())
                        {
                            mymodel.setRowCount(0);
                            do
                            {
                                if(table5==true)
                                {
                                    sno = myresult.getString("sno");
                                    cardname = myresult.getString("cardname");
                                    cardcolor = myresult.getString("cardcolor");
                                    mymodel.addRow(new Object[]{sno,cardname,cardcolor});
                                }
                                else if(table6==true)
                                {
                                    sno = myresult.getString("sno");
                                    cardname = myresult.getString("cardname");
                                    login = myresult.getString("login");
                                    mymodel.addRow(new Object[]{sno,cardname,login});
                                }
                                else  if(table7==true)
                                {
                                    sno = myresult.getString("sno");
                                    cardname = myresult.getString("cardname");
                                    accountholdername = myresult.getString("accountholdername");
                                    bankname = myresult.getString("bankname");
                                    mymodel.addRow(new Object[]{sno,cardname,accountholdername,bankname});
                                }
                                else  if(table8==true)
                                {
                                    sno = myresult.getString("sno");
                                    cardname = myresult.getString("cardname");
                                    cardtype = myresult.getString("cardtype");
                                    mymodel.addRow(new Object[]{sno,cardname,cardtype});
                                }
                                table.addRowSelectionInterval(0, 0);
                            }
                            while(myresult.next());
                        }
                        else
                        {
                            //JOptionPane.showMessageDialog(this, "No Records Found!!!");
                        }
                    }
                    catch(Exception e)
                    {
                        JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
                }
    }
    
    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        if(!passwordgenerator.isVisible())
        {
            passgen obj = new passgen();
            jDesktopPane1.add(obj);
            obj.setVisible(true);
            passwordgenerator = obj;
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void searchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyPressed
        if(search.getForeground()!=Color.BLACK)
        {
            if(search.getText().equals("Search"))
            {
                search.setText("");
                search.setCaretPosition(0);
                passwordpanelsearch = true;
                securitypanelweaksearch = false;
                securitypanelstrongsearch = false;
            }
        }
        search.setForeground(Color.BLACK);
    }//GEN-LAST:event_searchKeyPressed

    private void searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchMouseClicked
        if(search.getForeground()!=Color.BLACK)
        {
            if(search.getText().equals("Search"))
            {
                search.setCaretPosition(0);
            }
        }
    }//GEN-LAST:event_searchMouseClicked

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
        if(search.getText().isEmpty())
        {
            search.setText("Search");
            search.setCaretPosition(0);
            search.setForeground(new Color(205,205,205));
            search("");
        }
        else if(evt.getExtendedKeyCode()!=KeyEvent.VK_ENTER&&evt.getExtendedKeyCode()!=KeyEvent.VK_SPACE)
        {
            search(search.getText());
        }
    }//GEN-LAST:event_searchKeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String tosearch = search.getText();
        if(tosearch.equals("Search"))
        {
            search("");
        }
        else
        {
            search(tosearch);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        if(!addcategory.isVisible())
        {
            AddPassCategory obj = new AddPassCategory();
            jDesktopPane1.add(obj);
            obj.setVisible(true);
            addcategory = obj;
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        if(!sh.isVisible())
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "select * from details where sno=?";
                    String ssno = jTable3.getValueAt(jTable3.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,website,login,password,category,name,note,secondarylogin,email;
                    if(result.next())
                    {
                        email = result.getString("email");
                        website = result.getString("website");
                        login = result.getString("login");
                        name = result.getString("name");
                        note = result.getString("note");
                        secondarylogin = result.getString("secondarylogin");
                        sno = result.getString("sno");
                        password = result.getString("password");
                        category = result.getString("category");
                        int index = Integer.parseInt(category);
                        askforpassword = result.getString("passwordprotected");
                        int or;
                        if(index==0)
                        {
                            or = index;
                        }
                        else
                        {
                            or = index-1;
                        }
                        showpass obj = new showpass();
                        obj.weak = true;
                        obj.strong = true;
                        sh = obj;
                        jDesktopPane1.add(obj);
                        obj.setVisible(true);
                        obj.idnumber=idnumber;
                        obj.userlogin.setText(login);
                        obj.websitename.setText(website);
                        obj.serialno.setText(sno);
                        obj.userpassword.setText(password);
                        obj.userwebsite.setText(website);
                        obj.webname.setText(website);
                        obj.usernote.setText(note);
                        obj.userseclogin.setText(secondarylogin);
                        obj.useremail.setText(email);
                        try
                        {
                            obj.usercategory.setSelectedIndex(or);
                        }
                        catch(Exception e)
                        {
                            JOptionPane.showMessageDialog(this, "You Have Deleted That Category...");
                            obj.usercategory.setSelectedItem("Other");
                        }
                        if(askforpassword.equalsIgnoreCase("true"))
                        {
                            obj.passwordprotected.setSelected(true);
                        }
                        else
                        {
                            obj.passwordprotected.setSelected(false);
                        }
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            obj.showpassin.setVisible(false);
                            obj.hidepassin.setVisible(false);   
                        }
                        else
                        {
                            obj.hidepassin.setVisible(false);
                            obj.showpassin.setVisible(true);
                            obj.userpassword.enable();
                            obj.securitypass = true;
                            obj.userpassword.setForeground(Color.BLACK);
                        }
                        obj.flag = false;
                        showpass.serialno.disable();
                    }
                    else
                    {
                        //JOptionPane.showMessageDialog(this,"NO Records Found!!!");
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
            }
        }
        else   
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "select * from details where sno=?";
                    String ssno = jTable3.getValueAt(jTable3.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,website,login,password,category,name,note,secondarylogin,email;
                    if(result.next())
                    {
                        email = result.getString("email");
                        website = result.getString("website");
                        login = result.getString("login");
                        name = result.getString("name");
                        note = result.getString("note");
                        secondarylogin = result.getString("secondarylogin");
                        sno = result.getString("sno");
                        password = result.getString("password");
                        category = result.getString("category");
                        int index = Integer.parseInt(category);
                        int or;
                        if(index==0)
                        {
                            or = index;
                        }
                        else
                        {
                            or = index-1;
                        }
                        sh.weak = true;
                        sh.idnumber=idnumber;
                        sh.userlogin.setText(login);
                        sh.websitename.setText(website);
                        sh.serialno.setText(sno);
                        sh.userpassword.disable();
                        sh.userpassword.setText(password);
                        sh.userwebsite.setText(website);
                        sh.webname.setText(website);
                        sh.usernote.setText(note);
                        sh.userseclogin.setText(secondarylogin);
                        sh.useremail.setText(email);
                        try
                        {
                            sh.usercategory.setSelectedIndex(or);
                        }
                        catch(Exception e)
                        {
                            JOptionPane.showMessageDialog(this, "You Have Deleted That Category...");
                            sh.usercategory.setSelectedItem("Other");
                        }
                        sh.showpassin.setVisible(false);
                        sh.hidepassin.setVisible(false);
                        sh.flag = false;
                        showpass.serialno.disable();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this,"NO Records Found!!!");
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
            }
        }
    }//GEN-LAST:event_jTable3MouseClicked

    private void search1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_search1MouseClicked
        if(search1.getForeground()!=Color.BLACK)
        {
            if(search1.getText().equals("Search"))
            {
                search1.setCaretPosition(0);
            }
        }
    }//GEN-LAST:event_search1MouseClicked

    private void search1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search1KeyPressed
        if(search1.getForeground()!=Color.BLACK)
        {
            if(search1.getText().equals("Search"))
            {
                search1.setText("");
                search1.setCaretPosition(0);
                securitypanelweaksearch = true;
                securitypanelstrongsearch = false;
                passwordpanelsearch = false;
            }
        }
        search1.setForeground(Color.BLACK);
    }//GEN-LAST:event_search1KeyPressed

    private void search1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search1KeyReleased
        securitypanelweaksearch = true;
        securitypanelstrongsearch = false;
        passwordpanelsearch = false;
        if(search1.getText().isEmpty())
        {
            search1.setText("Search");
            search1.setCaretPosition(0);
            search1.setForeground(new Color(205,205,205));
            search("");
        }
        else if(evt.getExtendedKeyCode()!=KeyEvent.VK_ENTER&&evt.getExtendedKeyCode()!=KeyEvent.VK_SPACE)
        {
            search(search1.getText());
        }
    }//GEN-LAST:event_search1KeyReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        securitypanelweaksearch = true;
        securitypanelstrongsearch = false;
        passwordpanelsearch = false;
        if(search1.getText().isEmpty())
        {
            search1.setText("Search");
            search1.setCaretPosition(0);
            search1.setForeground(new Color(205,205,205));
            search("");
        }
        else if(search1.getText().equals("Search"))
        {
            search("");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable4MouseClicked
        if(!sh.isVisible())
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "select * from details where sno=?";
                    String ssno = jTable4.getValueAt(jTable4.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,website,login,password,category,name,note,secondarylogin,email;
                    if(result.next())
                    {
                        email = result.getString("email");
                        website = result.getString("website");
                        login = result.getString("login");
                        name = result.getString("name");
                        note = result.getString("note");
                        secondarylogin = result.getString("secondarylogin");
                        sno = result.getString("sno");
                        password = result.getString("password");
                        category = result.getString("category");
                        int index = Integer.parseInt(category);
                        askforpassword = result.getString("passwordprotected");
                        int or;
                        if(index==0)
                        {
                            or = index;
                        }
                        else
                        {
                            or = index-1;
                        }
                        showpass obj = new showpass();
                        obj.weak = true;
                        sh = obj;
                        jDesktopPane1.add(obj);
                        obj.setVisible(true);
                        obj.idnumber=idnumber;
                        obj.userlogin.setText(login);
                        obj.websitename.setText(website);
                        obj.serialno.setText(sno);
                        obj.userpassword.setText(password);
                        obj.userwebsite.setText(website);
                        obj.webname.setText(website);
                        obj.usernote.setText(note);
                        obj.userseclogin.setText(secondarylogin);
                        obj.useremail.setText(email);
                        try
                        {
                            obj.usercategory.setSelectedIndex(or);
                        }
                        catch(Exception e)
                        {
                            JOptionPane.showMessageDialog(this, "You Have Deleted That Category...");
                            obj.usercategory.setSelectedItem("Other");
                        }
                        if(askforpassword.equalsIgnoreCase("true"))
                        {
                            obj.passwordprotected.setSelected(true);
                        }
                        else
                        {
                            obj.passwordprotected.setSelected(false);
                        }
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            obj.showpassin.setVisible(false);
                            obj.hidepassin.setVisible(false);
                        }
                        else
                        {
                            obj.hidepassin.setVisible(false);
                            obj.showpassin.setVisible(true);
                            obj.userpassword.enable();
                            obj.userpassword.setForeground(Color.BLACK);
                        }
                        obj.flag = false;
                        showpass.serialno.disable();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this,"NO Records Found!!!");
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
            }
        }
        else   
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "select * from details where sno=?";
                    String ssno = jTable4.getValueAt(jTable4.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,website,login,password,category,name,note,secondarylogin,email;
                    if(result.next())
                    {
                        email = result.getString("email");
                        website = result.getString("website");
                        login = result.getString("login");
                        name = result.getString("name");
                        note = result.getString("note");
                        secondarylogin = result.getString("secondarylogin");
                        sno = result.getString("sno");
                        password = result.getString("password");
                        category = result.getString("category");
                        int index = Integer.parseInt(category);
                        int or;
                        if(index==0)
                        {
                            or = index;
                        }
                        else
                        {
                            or = index-1;
                        }
                        sh.weak = true;
                        sh.idnumber=idnumber;
                        sh.userlogin.setText(login);
                        sh.websitename.setText(website);
                        sh.serialno.setText(sno);
                        sh.userpassword.disable();
                        sh.userpassword.setText(password);
                        sh.userwebsite.setText(website);
                        sh.webname.setText(website);
                        sh.usernote.setText(note);
                        sh.userseclogin.setText(secondarylogin);
                        sh.useremail.setText(email);
                        try
                        {
                            sh.usercategory.setSelectedIndex(or);
                        }
                        catch(Exception e)
                        {
                            JOptionPane.showMessageDialog(this, "You Have Deleted That Category...");
                            sh.usercategory.setSelectedItem("Other");
                        }
                        sh.showpassin.setVisible(false);
                        sh.hidepassin.setVisible(false);
                        sh.flag = false;
                        showpass.serialno.disable();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this,"NO Records Found!!!");
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
            }
        }
    }//GEN-LAST:event_jTable4MouseClicked

    private void search2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_search2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_search2MouseClicked

    private void search2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search2KeyPressed
        if(search2.getForeground()!=Color.BLACK)
        {
            if(search2.getText().equals("Search"))
            {
                search2.setText("");
                search2.setCaretPosition(0);
                securitypanelweaksearch = false;
                securitypanelstrongsearch = true;
                passwordpanelsearch = false;
            }
        }
        search2.setForeground(Color.BLACK);
    }//GEN-LAST:event_search2KeyPressed

    private void search2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search2KeyReleased
        securitypanelweaksearch = false;
        securitypanelstrongsearch = true;
        passwordpanelsearch = false;
        if(search2.getText().isEmpty())
        {
            search2.setText("Search");
            search2.setCaretPosition(0);
            search2.setForeground(new Color(205,205,205));
            search("");
        }
        else if(evt.getExtendedKeyCode()!=KeyEvent.VK_ENTER&&evt.getExtendedKeyCode()!=KeyEvent.VK_SPACE)
        {
            search(search2.getText());
        }
    }//GEN-LAST:event_search2KeyReleased

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        securitypanelweaksearch = false;
        securitypanelstrongsearch = true;
        passwordpanelsearch = false;
        if(search2.getText().equalsIgnoreCase("Search"))
        {
            //search2.setText("Search");
            //search2.setCaretPosition(0);
            //search2.setForeground(new Color(205,205,205));
            search("");
        }
        else
        {
            search(search2.getText());
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        //jButton4.doClick();
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void addnewnoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addnewnoteActionPerformed
        securenotes.click = false;
        if(addnewnote.getSelectedItem().toString().equalsIgnoreCase("Blank Note"))
        {
            if(!securenote.isVisible())
            {
                securenotes obj = new securenotes();
                jDesktopPane1.add(obj);
                obj.setVisible(true);
                securenote = obj;
                obj.serialno.disable();
                obj.serialno.hide();
                obj.idnumber = idnumber;
                obj.jLabel19.setVisible(false);
                obj.note.setText("");
                obj.notename.setText(addnewnote.getSelectedItem().toString());
            }
            else
            {
                securenote.serialno.disable();
                securenote.serialno.hide();
                securenote.idnumber = idnumber;
                securenote.jLabel19.setVisible(false);
                securenote.note.setText("");
                securenote.notename.setText(addnewnote.getSelectedItem().toString());
            }
        }
        else if(addnewnote.getSelectedItem().toString().equalsIgnoreCase("Application Password"))
        {
            if(!securenote.isVisible())
            {
                securenotes obj = new securenotes();
                jDesktopPane1.add(obj);
                obj.serialno.disable();
                obj.serialno.hide();
                obj.jLabel19.setVisible(false);
                obj.setVisible(true);
                securenote = obj;
                obj.note.setText("Application:  \n" +
                        "\n" +
                        "Application path:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Login:  \n" +
                        "\n" +
                        "Password:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Notes:  ");
                obj.notename.setText(addnewnote.getSelectedItem().toString());
            }
            else
            {
                securenote.serialno.disable();
                securenote.serialno.hide();
                securenote.jLabel19.setVisible(false);
                securenote.note.setText("Application:  \n" +
                        "\n" +
                        "Application path:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Login:  \n" +
                        "\n" +
                        "Password:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Notes:  ");
                securenote.notename.setText(addnewnote.getSelectedItem().toString());
            }
        }
        else if(addnewnote.getSelectedItem().toString().equalsIgnoreCase("Database"))
        {
            if(!securenote.isVisible())
            {
                securenotes obj = new securenotes();
                jDesktopPane1.add(obj);
                obj.serialno.disable();
                obj.serialno.hide();
                obj.jLabel19.setVisible(false);
                obj.setVisible(true);
                securenote = obj;
                obj.note.setText("Server: \n" +
                        "\n" +
                        "Port: \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Database name: \n" +
                        "\n" +
                        "Username: \n" +
                        "\n" +
                        "Password: \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "SID: \n" +
                        "\n" +
                        "Alias: \n" +
                        "\n" +
                        "Connection options: \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Notes: ");
                obj.notename.setText(addnewnote.getSelectedItem().toString());
            }
            else
            {
                securenote.serialno.disable();
                securenote.serialno.hide();
                securenote.jLabel19.setVisible(false);
                securenote.note.setText("Server: \n" +
                        "\n" +
                        "Port: \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Database name: \n" +
                        "\n" +
                        "Username: \n" +
                        "\n" +
                        "Password: \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "SID: \n" +
                        "\n" +
                        "Alias: \n" +
                        "\n" +
                        "Connection options: \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Notes: ");
                securenote.notename.setText(addnewnote.getSelectedItem().toString());
            }
        }
        else if(addnewnote.getSelectedItem().toString().equalsIgnoreCase("Finance"))
        {
            if(!securenote.isVisible())
            {
                securenotes obj = new securenotes();
                jDesktopPane1.add(obj);
                obj.serialno.disable();
                obj.serialno.hide();
                obj.jLabel19.setVisible(false);
                obj.setVisible(true);
                securenote = obj;
                obj.note.setText("Bank name:  \n" +
                                "\n" +
                                "--\n" +
                                "\n" +
                                "Name on account:  \n" +
                                "\n" +
                                "Type:  \n" +
                                "\n" +
                                "--\n" +
                                "\n" +
                                "Routing number:  \n" +
                                "\n" +
                                "Account number:  \n" +
                                "\n" +
                                "SWIFT code:  \n" +
                                "\n" +
                                "IBAN number:  \n" +
                                "\n" +
                                "PIN:  \n" +
                                "\n" +
                                "--\n" +
                                "\n" +
                                "Branch phone number:  \n" +
                                "\n" +
                                "Branch address:  \n" +
                                "\n" +
                                "--\n" +
                                "\n" +
                                "Notes: ");
                obj.notename.setText(addnewnote.getSelectedItem().toString());
            }
            else
            {
                securenote.serialno.disable();
                securenote.serialno.hide();
                securenote.jLabel19.setVisible(false);
                securenote.note.setText("Bank name:  \n" +
                                "\n" +
                                "--\n" +
                                "\n" +
                                "Name on account:  \n" +
                                "\n" +
                                "Type:  \n" +
                                "\n" +
                                "--\n" +
                                "\n" +
                                "Routing number:  \n" +
                                "\n" +
                                "Account number:  \n" +
                                "\n" +
                                "SWIFT code:  \n" +
                                "\n" +
                                "IBAN number:  \n" +
                                "\n" +
                                "PIN:  \n" +
                                "\n" +
                                "--\n" +
                                "\n" +
                                "Branch phone number:  \n" +
                                "\n" +
                                "Branch address:  \n" +
                                "\n" +
                                "--\n" +
                                "\n" +
                                "Notes: ");
                securenote.notename.setText(addnewnote.getSelectedItem().toString());
            }
        }
        else if(addnewnote.getSelectedItem().toString().equalsIgnoreCase("Legal Document"))
        {
            if(!securenote.isVisible())
            {
                securenotes obj = new securenotes();
                jDesktopPane1.add(obj);
                obj.serialno.disable();
                obj.serialno.hide();
                obj.jLabel19.setVisible(false);
                obj.setVisible(true);
                securenote = obj;
                obj.note.setText("Type:  \n" +
                                "\n" +
                        "Issuing country:  \n" +
                        "\n" +
                        "Number:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Full name:  \n" +
                        "\n" +
                        "Nationality:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Issuing authority:  \n" +
                        "\n" +
                        "Date of birth:  \n" +
                        "\n" +
                        "Place of birth:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Issued date:  \n" +
                        "\n" +
                        "Expiration date:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Notes:  ");
                obj.notename.setText(addnewnote.getSelectedItem().toString());
            }
            else
            {
                securenote.serialno.disable();
                securenote.serialno.hide();
                securenote.jLabel19.setVisible(false);
                securenote.note.setText("Type:  \n" +
                                "\n" +
                            "Issuing country:  \n" +
                            "\n" +
                            "Number:  \n" +
                            "\n" +
                            "--\n" +
                            "\n" +
                            "Full name:  \n" +
                            "\n" +
                            "Nationality:  \n" +
                            "\n" +
                            "--\n" +
                            "\n" +
                            "Issuing authority:  \n" +
                            "\n" +
                            "Date of birth:  \n" +
                            "\n" +
                            "Place of birth:  \n" +
                            "\n" +
                            "--\n" +
                            "\n" +
                            "Issued date:  \n" +
                            "\n" +
                            "Expiration date:  \n" +
                            "\n" +
                            "--\n" +
                            "\n" +
                            "Notes:  ");
                securenote.notename.setText(addnewnote.getSelectedItem().toString());
            }
        }
        else if(addnewnote.getSelectedItem().toString().equalsIgnoreCase("Memberships"))
        {
            if(!securenote.isVisible())
            {
                securenotes obj = new securenotes();
                jDesktopPane1.add(obj);
                obj.serialno.disable();
                obj.serialno.hide();
                obj.jLabel19.setVisible(false);
                obj.setVisible(true);
                securenote = obj;
                obj.note.setText("Organization:  \n" +
                        "\n" +
                        "Website:  \n" +
                        "\n" +
                        "Phone number:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Member name:  \n" +
                        "\n" +
                        "Member since:  \n" +
                        "\n" +
                        "Expiration date:  \n" +
                        "\n" +
                        "Membership ID:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Password:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Notes:  ");
                obj.notename.setText(addnewnote.getSelectedItem().toString());
            }
            else
            {
                securenote.serialno.disable();
                securenote.serialno.hide();
                securenote.jLabel19.setVisible(false);
                securenote.note.setText("Organization:  \n" +
                        "\n" +
                        "Website:  \n" +
                        "\n" +
                        "Phone number:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Member name:  \n" +
                        "\n" +
                        "Member since:  \n" +
                        "\n" +
                        "Expiration date:  \n" +
                        "\n" +
                        "Membership ID:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Password:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Notes:  ");
                securenote.notename.setText(addnewnote.getSelectedItem().toString());
            }
        }
        else if(addnewnote.getSelectedItem().toString().equalsIgnoreCase("Server Info"))
        {
            if(!securenote.isVisible())
            {
                securenotes obj = new securenotes();
                jDesktopPane1.add(obj);
                obj.serialno.disable();
                obj.serialno.hide();
                obj.jLabel19.setVisible(false);
                obj.setVisible(true);
                securenote = obj;
                obj.note.setText("URL:  \n" +
                        "\n" +
                        "Username:  \n" +
                        "\n" +
                        "Password:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Admin console URL:  \n" +
                        "\n" +
                        "Admin console username:  \n" +
                        "\n" +
                        "Console password:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Host name:  \n" +
                        "\n" +
                        "Website:  \n" +
                        "\n" +
                        "Support phone number:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Notes:  ");
                obj.notename.setText(addnewnote.getSelectedItem().toString());
            }
            else
            {
                securenote.serialno.disable();
                securenote.serialno.hide();
                securenote.jLabel19.setVisible(false);
                securenote.note.setText("URL:  \n" +
                        "\n" +
                        "Username:  \n" +
                        "\n" +
                        "Password:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Admin console URL:  \n" +
                        "\n" +
                        "Admin console username:  \n" +
                        "\n" +
                        "Console password:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Host name:  \n" +
                        "\n" +
                        "Website:  \n" +
                        "\n" +
                        "Support phone number:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Notes:  ");
                securenote.notename.setText(addnewnote.getSelectedItem().toString());
            }
        }
        else if(addnewnote.getSelectedItem().toString().equalsIgnoreCase("Software License"))
        {
            if(!securenote.isVisible())
            {
                securenotes obj = new securenotes();
                jDesktopPane1.add(obj);
                obj.serialno.disable();
                obj.serialno.hide();
                obj.jLabel19.setVisible(false);
                obj.setVisible(true);
                securenote = obj;
                obj.note.setText("Version:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "License key:  \n" +
                        "\n" +
                        "Licensed to:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Registered email:  \n" +
                        "\n" +
                        "Company:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Download page:  ");
                obj.notename.setText(addnewnote.getSelectedItem().toString());
            }
            else
            {
                securenote.serialno.disable();
                securenote.serialno.hide();
                securenote.jLabel19.setVisible(false);
                securenote.note.setText("Version:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "License key:  \n" +
                        "\n" +
                        "Licensed to:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Registered email:  \n" +
                        "\n" +
                        "Company:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Download page:  ");
                securenote.notename.setText(addnewnote.getSelectedItem().toString());
            }
        }
        else if(addnewnote.getSelectedItem().toString().equalsIgnoreCase("Wifi Password"))
        {
            if(!securenote.isVisible())
            {
                securenotes obj = new securenotes();
                jDesktopPane1.add(obj);
                obj.serialno.disable();
                obj.serialno.hide();
                obj.jLabel19.setVisible(false);
                obj.setVisible(true);
                securenote = obj;
                obj.note.setText("Network name:  \n" +
                        "\n" +
                        "Wireless security:  \n" +
                        "\n" +
                        "Network password:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Server/IP address:  \n" +
                        "\n" +
                        "Base station name:  \n" +
                        "\n" +
                        "Base station password:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Support phone number:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Notes:  ");
                obj.notename.setText(addnewnote.getSelectedItem().toString());
            }
            else
            {
                securenote.serialno.disable();
                securenote.serialno.hide();
                securenote.jLabel19.setVisible(false);
                securenote.note.setText("Network name:  \n" +
                        "\n" +
                        "Wireless security:  \n" +
                        "\n" +
                        "Network password:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Server/IP address:  \n" +
                        "\n" +
                        "Base station name:  \n" +
                        "\n" +
                        "Base station password:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Support phone number:  \n" +
                        "\n" +
                        "--\n" +
                        "\n" +
                        "Notes:  ");
                securenote.notename.setText(addnewnote.getSelectedItem().toString());
            }
        }
    }//GEN-LAST:event_addnewnoteActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        if(!securenote.isVisible())
        {
            securenotes.click = true;
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "select * from securenotes where sno=?";
                    String ssno = jTable2.getValueAt(jTable2.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,note,type,title;
                    if(result.next())
                    {
                        sno = result.getString("sno");
                        //note = result.getString("note");
                        type = result.getString("type");
                        title = result.getString("title");
                        note = result.getString("note");
                        askforpassword = result.getString("passwordprotected");
                        securenotes obj1 = new securenotes();
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            notesflag=true;
                            verifypasswordframe.sno = sno;
                            verifypasswordframe.type = type;
                            verifypasswordframe.note = note;
                            verifypasswordframe.title = title;
                            verifypasswordframe.header=type;
                            verifypasswordframe.askforpassword = askforpassword;
                            verifypasswordframe.securenotes = true;
                            verifypasswordframe.sec = securenote;
                            verifypasswordframe.securenotes = true;
                            verifypasswordframe.sec = obj1;
                            verifypasswordframe obj = new verifypasswordframe();
                            obj.setVisible(true);
                            obj.idnumber=idnumber;
                            securenote = obj1;
                            obj1.flag = false;
                        }
                        else
                        {
                            jDesktopPane1.add(obj1);
                            obj1.setTitle(type);
                            obj1.setVisible(true);
                            securenote = obj1;
                            obj1.setTitle(type);
                            obj1.idnumber=idnumber;
                            obj1.serialno.setText(sno);
                            obj1.serialno.disable();
                            obj1.note.setText(note);
                            obj1.title.setText(title);
                            obj1.title.setForeground(Color.BLACK);
                            obj1.notename.setText(type);
                            if(askforpassword.equalsIgnoreCase("true"))
                            {
                                obj1.passwordprotected.setSelected(true);
                            }
                            else
                            {
                                obj1.passwordprotected.setSelected(false);
                            }
                            obj1.flag = false;
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this,"NO Records Found!!!");
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to 1: "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to 2: "+e.getMessage());
            }
        }
        else   
        {
            securenotes.click = true;
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "select * from securenotes where sno=?";
                    String ssno = jTable2.getValueAt(jTable2.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,note,type,title;
                    if(result.next())
                    {
                        sno = result.getString("sno");
                        note = result.getString("note");
                        type = result.getString("type");
                        title = result.getString("title");
                        note = result.getString("note");
                        askforpassword = result.getString("passwordprotected");
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            notesflag = true;
                            verifypasswordframe.sno = sno;
                            verifypasswordframe.type = type;
                            verifypasswordframe.note = note;
                            verifypasswordframe.header=type;
                            verifypasswordframe.title = title;
                            verifypasswordframe.askforpassword = askforpassword;
                            verifypasswordframe.securenotes = true;
                            verifypasswordframe.sec = securenote;
                            verifypasswordframe obj = new verifypasswordframe();
                            obj.setVisible(true);
                            obj.idnumber=idnumber;
                            securenote.flag = false;
                        }
                        else
                        {
                            securenote.idnumber=idnumber;
                            securenote.serialno.setText(sno);
                            securenote.serialno.disable();
                            securenote.setTitle(type);
                            securenote.note.setText(note);
                            securenote.title.setText(title);
                            securenote.title.setForeground(Color.BLACK);
                            securenote.notename.setText(type);
                            if(askforpassword.equalsIgnoreCase("true"))
                            {
                                securenote.passwordprotected.setSelected(true);
                            }
                            else
                            {
                                securenote.passwordprotected.setSelected(false);
                            }
                            securenote.flag = false;
                        }
                    }
                    else
                    {
                        
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to 3: "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to 4: "+e.getMessage());
            }
        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        searchnotes(search3.getText());
    }//GEN-LAST:event_jButton6ActionPerformed

    private void search3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_search3MouseClicked
        if(search3.getText().equals("Search"))
        {
            search3.setCaretPosition(0);
        }
    }//GEN-LAST:event_search3MouseClicked

    private void search3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search3KeyPressed
        if(search3.getForeground()!=Color.BLACK)
        {
            if(search3.getText().equals("Search"))
            {
                search3.setText("");
                search3.setCaretPosition(0);
            }
        }
        search3.setForeground(Color.BLACK);
    }//GEN-LAST:event_search3KeyPressed

    private void search3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search3KeyReleased
        if(search3.getText().isEmpty())
        {
            search3.setText("Search");
            search3.setCaretPosition(0);
            search3.setForeground(new Color(205,205,205));
            searchnotes("");
        }
        else if(evt.getExtendedKeyCode()!=KeyEvent.VK_ENTER&&evt.getExtendedKeyCode()!=KeyEvent.VK_SPACE)
        {
            searchnotes(search3.getText());
        }
    }//GEN-LAST:event_search3KeyReleased

    private void personalinfoboxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_personalinfoboxMouseEntered
        if(personalinfo!=true)
        {
            personalinfobox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/focusedpersonalinfo.png")));
        }
    }//GEN-LAST:event_personalinfoboxMouseEntered

    private void personalinfoboxMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_personalinfoboxMouseExited
        if(personalinfo!=true)
        {
            personalinfobox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/personalinfo.png")));
        }
    }//GEN-LAST:event_personalinfoboxMouseExited

    public static void filljtable10()
    {
        try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                    try
                    {
                        String query3 = "Select * from usernewdetail where id=?";
                        PreparedStatement mystat2 = myconnection.prepareStatement(query3);
                        mystat2.setString(1, dashlane.idnumber);
                        ResultSet myresult3 = mystat2.executeQuery();
                        DefaultTableModel mymodel3;
                        String sno, title, firstname, middlename, lastname, defaultlogin, dob, email, emailtype;
                        mymodel3 = (DefaultTableModel)jTable10.getModel();
                        if(myresult3.next())
                        {
                            mymodel3.setRowCount(0);
                            do
                            {
                                sno = myresult3.getString("sno");
                                title = myresult3.getString("title");
                                firstname = myresult3.getString("firstname");
                                middlename = myresult3.getString("middlename");
                                lastname = myresult3.getString("lastname");
                                email = myresult3.getString("email");
                                emailtype = myresult3.getString("emailtype");
                                dob = myresult3.getString("dob");
                                mymodel3.addRow(new Object[]{sno,firstname+lastname,email,emailtype});
                            }
                            while(myresult3.next());
                        }
                    }
                    catch(Exception e)
                    {
                          //JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
        catch(Exception e)
        {
            //JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
        }
    }
    
    private void personalinfoboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personalinfoboxActionPerformed
        personalinfo=true;
        notes = false;
        pass = false;
        security = false;
        payments = false;
        ids = false;
        receipts = false;
        passbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/passwordbox_icon.png")));
        securitybox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/security.png")));
        securenotesbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/securenotes.png")));
        personalinfobox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/personalinfo2.png")));
        paymentsbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/payments.png")));
        idspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/idspanel_icon.png")));
        receiptspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/receiptspanelbox.png")));
        personalinfopanel.setVisible(true);
        recieptspanel.setVisible(false);
        passwordpanel.setVisible(false);
        securitypanel.setVisible(false);
        securenotespanel.setVisible(false);
        paymentspanel.setVisible(false);
        idspanel.setVisible(false);
        filljtable10();
        
    }//GEN-LAST:event_personalinfoboxActionPerformed

    private void receiptspanelboxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_receiptspanelboxMouseEntered
        if(receipts!=true)
        {
            receiptspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/focusedreceipts.png")));
        }
    }//GEN-LAST:event_receiptspanelboxMouseEntered

    private void receiptspanelboxMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_receiptspanelboxMouseExited
        if(receipts!=true)
        {
            receiptspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/receiptspanelbox.png")));
        }
    }//GEN-LAST:event_receiptspanelboxMouseExited

    private void receiptspanelboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiptspanelboxActionPerformed
        payments = false;
        personalinfo=false;
        notes = false;
        pass = false;
        security = false;
        ids = false;
        receipts = true;
        personalinfopanel.setVisible(false);
        passwordpanel.setVisible(false);
        securitypanel.setVisible(false);
        securenotespanel.setVisible(false);
        paymentspanel.setVisible(false);
        idspanel.setVisible(false);
        recieptspanel.setVisible(true);
        passbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/passwordbox_icon.png")));
        securitybox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/security.png")));
        securenotesbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/securenotes.png")));
        personalinfobox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/personalinfo.png")));
        paymentsbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/payments.png")));
        idspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/idspanel_icon.png")));
        receiptspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/receipts2.png")));
        filljtable9();
    }//GEN-LAST:event_receiptspanelboxActionPerformed

    private void paymentsboxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentsboxMouseEntered
        if(payments!=true)
        {
            paymentsbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/focusedpayments.png")));
        }
    }//GEN-LAST:event_paymentsboxMouseEntered

    private void paymentsboxMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentsboxMouseExited
        if(payments!=true)
        {
            paymentsbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/payments.png")));
        }
    }//GEN-LAST:event_paymentsboxMouseExited
    
    public void filljtable5()
    {
        try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                    try
                    {
                        String query = "Select * from creditcards where id=?";
                        PreparedStatement mystatement = myconnection.prepareStatement(query);
                        mystatement.setString(1,dashlane.idnumber);
                        //System.out.println("query : "+mystatement.toString());
                        ResultSet myresult = mystatement.executeQuery();
                        DefaultTableModel mymodel;
                        String sno,cardholdername, cardname, cardnumber, securitycode, expirydate, issuingbank, cardcolor,login;
                        mymodel = (DefaultTableModel)jTable5.getModel();
                        if(myresult.next())
                        {
                            mymodel.setRowCount(0);
                            do
                            {
                                sno = myresult.getString("sno");
                                cardholdername = myresult.getString("cardholdername");
                                cardname = myresult.getString("cardname");
                                cardnumber = myresult.getString("cardnumber");
                                securitycode = myresult.getString("securitycode");
                                expirydate = myresult.getString("expirydate");
                                issuingbank = myresult.getString("issuingbank");
                                cardcolor = myresult.getString("cardcolor");
                                mymodel.addRow(new Object[]{sno,cardname,cardcolor});
                            }
                            while(myresult.next());
                        }
                    }
                    catch(Exception e)
                    {
                          JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
        }
    }
    
    public void filljtable6()
    {
        try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                    try
                    {
                        String query2 = "Select * from paypalcards where id=?";
                        PreparedStatement mystat = myconnection.prepareStatement(query2);
                        mystat.setString(1, dashlane.idnumber);
                        ResultSet myresult2 = mystat.executeQuery();
                        DefaultTableModel mymodel2;
                        mymodel2 = (DefaultTableModel)jTable6.getModel();
                        String sno, cardname, login;
                        if(myresult2.next())
                        {
                            mymodel2.setRowCount(0);
                            do
                            {
                                sno = myresult2.getString("sno");
                                cardname = myresult2.getString("cardname");
                                login = myresult2.getString("login");
                                mymodel2.addRow(new Object[]{sno,cardname,login});
                            }
                            while(myresult2.next());
                        }
                    }
                    catch(Exception e)
                    {
                          JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
        }
    }
    
    public void filljtable7()
    {
        try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                    try
                    {
                        String query3 = "Select * from bankcards where id=?";
                        PreparedStatement mystat2 = myconnection.prepareStatement(query3);
                        mystat2.setString(1, dashlane.idnumber);
                        ResultSet myresult3 = mystat2.executeQuery();
                        DefaultTableModel mymodel3;
                        String id, sno, cardname, accountholdername, routingnumber, accountnumber, bankname;
                        mymodel3 = (DefaultTableModel)jTable7.getModel();
                        if(myresult3.next())
                        {
                            mymodel3.setRowCount(0);
                            do
                            {
                                sno = myresult3.getString("sno");
                                cardname = myresult3.getString("cardname");
                                accountholdername = myresult3.getString("accountholdername");
                                bankname = myresult3.getString("bankname");
                                mymodel3.addRow(new Object[]{sno,cardname,accountholdername,bankname});
                            }
                            while(myresult3.next());
                        }
                    }
                    catch(Exception e)
                    {
                          JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
        }
    }
    
    public void refresh()
    {
        filljtable5();
        filljtable6();
        filljtable7();
    }
    
    private void paymentsboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentsboxActionPerformed
        payments = true;
        personalinfo=false;
        notes = false;
        pass = false;
        security = false;
        ids = false;
        receipts = false;
        passwordpanel.setVisible(false);
        personalinfopanel.setVisible(false);
        securitypanel.setVisible(false);
        securenotespanel.setVisible(false);
        paymentspanel.setVisible(true);
        idspanel.setVisible(false);
        recieptspanel.setVisible(false);
        passbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/passwordbox_icon.png")));
        securitybox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/security.png")));
        securenotesbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/securenotes.png")));
        personalinfobox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/personalinfo.png")));
        paymentsbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/payments2.png")));
        receiptspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/receiptspanelbox.png")));
        idspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/idspanel_icon.png")));
        refresh();
    }//GEN-LAST:event_paymentsboxActionPerformed

    private void idspanelboxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_idspanelboxMouseEntered
        if(ids!=true)
        {
            idspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/idspanelselected.png")));
        }
    }//GEN-LAST:event_idspanelboxMouseEntered

    private void idspanelboxMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_idspanelboxMouseExited
        if(ids!=true)
        {
            idspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/idspanel_icon.png")));
        }
    }//GEN-LAST:event_idspanelboxMouseExited

    private void idspanelboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idspanelboxActionPerformed
        payments = false;
        personalinfo=false;
        notes = false;
        pass = false;
        security = false;
        ids = true;
        receipts = false;
        personalinfopanel.setVisible(false);
        passwordpanel.setVisible(false);
        securitypanel.setVisible(false);
        securenotespanel.setVisible(false);
        paymentspanel.setVisible(false);
        idspanel.setVisible(true);
        recieptspanel.setVisible(false);
        passbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/passwordbox_icon.png")));
        securitybox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/security.png")));
        securenotesbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/securenotes.png")));
        personalinfobox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/personalinfo.png")));
        paymentsbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/payments.png")));
        idspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/idspanel2.png")));
        receiptspanelbox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/receiptspanelbox.png")));
        filljtable8();    
    }//GEN-LAST:event_idspanelboxActionPerformed
    
    public void filljtable8()
    {
        try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                    try
                    {
                        String query = "Select * from idcards where id=?";
                        PreparedStatement mystatement = myconnection.prepareStatement(query);
                        mystatement.setString(1, dashlane.idnumber);
                        ResultSet myresult = mystatement.executeQuery();
                        DefaultTableModel mymodel;
                        String id, sno, cardname, cardtype;
                        mymodel = (DefaultTableModel)jTable8.getModel();
                        if(myresult.next())
                        {
                            mymodel.setRowCount(0);
                            do
                            {
                                sno = myresult.getString("sno");
                                cardname = myresult.getString("cardname");
                                cardtype = myresult.getString("cardtype");
                                mymodel.addRow(new Object[]{sno,cardname,cardtype});
                            }
                            while(myresult.next());
                        }
                    }
                    catch(Exception e)
                    {
                          JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
        }
    }
    
    public static void filljtable9()
    {
        try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                    try
                    {
                        String query = "Select * from receipts where id=?";
                        PreparedStatement mystatement = myconnection.prepareStatement(query);
                        mystatement.setString(1, dashlane.idnumber);
                        ResultSet myresult = mystatement.executeQuery();
                        DefaultTableModel mymodel;
                        String id, sno, currency, price, date,place;
                        mymodel = (DefaultTableModel)jTable9.getModel();
                        if(myresult.next())
                        {
                            mymodel.setRowCount(0);
                            do
                            {
                                sno = myresult.getString("sno");
                                currency = myresult.getString("currency");
                                price = myresult.getString("price");
                                date = myresult.getString("date");
                                place = myresult.getString("place");
                                mymodel.addRow(new Object[]{sno,date,currency,price,place});
                            }
                            while(myresult.next());
                        }
                    }
                    catch(Exception e)
                    {
                          //JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
        catch(Exception e)
        {
            //JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
        }
    }
    
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

    }//GEN-LAST:event_formWindowActivated

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        passbox.doClick();
    }//GEN-LAST:event_formWindowOpened

    private void addnewcardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addnewcardActionPerformed
        if(addnewcard.getSelectedIndex()>0)
        {
            if(addnewcard.getSelectedItem().equals("Credit/Debit Card"))
            {
                addcreditcard obj = new addcreditcard();
                jDesktopPane1.add(obj);
                obj.setVisible(true);
            }
            if(addnewcard.getSelectedItem().equals("Paypal Account"))
            {
                addpaypalaccount obj = new addpaypalaccount();
                jDesktopPane1.add(obj);
                obj.setVisible(true);
            }
            if(addnewcard.getSelectedItem().equals("Bank Account"))
            {
                addbankaccount obj = new addbankaccount();
                jDesktopPane1.add(obj);
                obj.setVisible(true);
            }
        }
    }//GEN-LAST:event_addnewcardActionPerformed

    private void jTable5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable5MouseClicked
    verifypasswordframe.showcredits = showcredit;
    if(!showcredit.isVisible())
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "Select * from creditcards where sno=?";
                    String ssno = jTable5.getValueAt(jTable5.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,cardholdername, cardname, cardnumber, securitycode, expirydate, issuingbank, cardcolor,passwordprotected,notesd;
                    if(result.next())
                    {
                        sno = result.getString("sno");
                        showcreditcard1.securitypass = false;
                        cardholdername = result.getString("cardholdername");
                        cardname = result.getString("cardname");
                        cardnumber = result.getString("cardnumber");
                        securitycode = result.getString("securitycode");
                        expirydate = result.getString("expirydate");
                        String month[] = expirydate.split("-");
                        issuingbank = result.getString("issuingbank");
                        cardcolor = result.getString("cardcolor");
                        askforpassword = result.getString("passwordprotected");
                        notesd = result.getString("note");
                        showcreditcard1 obj1 = new showcreditcard1();
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            cardflag=true;
                            verifypasswordframe.sno=sno;
                            verifypasswordframe.cardholdername=cardholdername;
                            verifypasswordframe.cardname=cardname; 
                            verifypasswordframe.cardnumber=cardnumber;
                            verifypasswordframe.securitycode=securitycode;
                            verifypasswordframe.expirydate=expirydate;
                            verifypasswordframe.issuingbank=issuingbank;
                            verifypasswordframe.cardcolor=cardcolor;
                            verifypasswordframe.passwordprotected=askforpassword;
                            verifypasswordframe.showcredits = showcredit;
                            verifypasswordframe.creditcard = true;
                            verifypasswordframe.note = notesd;
                            verifypasswordframe.month = month;
                            verifypasswordframe.showcredits = obj1;
                            verifypasswordframe obj = new verifypasswordframe();
                            obj.setVisible(true);
                            obj.idnumber=idnumber;
                            showcredit = obj1;
                            //obj1.flag = false;
                        }
                        else
                        {
                            jDesktopPane1.add(obj1);
                            obj1.setVisible(true);
                            showcredit = obj1;
                            //verifypasswordframe.showcredits = obj1;
                            obj1.cardnumber.setText(cardnumber);
                            obj1.sno.setText(sno);
                            obj1.sno.disable();
                            obj1.topcardname.setText(cardname);
                            obj1.cardholdername.setText(cardholdername);
                            obj1.cardname.setText(cardname);
                            obj1.securitycode.setText(securitycode);
                            obj1.issuingbankname.setText(issuingbank);
                            obj1.cardcolor.setSelectedItem(cardcolor);
                            obj1.passwordprotected.setSelected(false);
                            obj1.usernote.setText(notesd);
                            obj1.cardnumber.setEchoChar((char)0);
                            obj1.securitycode.setEchoChar((char)0);
                            obj1.monthbox.setSelectedItem(month[0]);
                            obj1.yearbox.setSelectedItem(month[1]);
                            obj1.securitypass=true;
                            obj1.flag = false;
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this,"NO Records Found!!!");
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
            }
        }
        else   
        {
            securenotes.click = true;
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "Select * from creditcards where sno=?";
                    String ssno = jTable5.getValueAt(jTable5.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,cardholdername, cardname, cardnumber, securitycode, expirydate, issuingbank, cardcolor,passwordprotected,notesd;
                    if(result.next())
                    {
                        sno = result.getString("sno");
                        showcreditcard1.securitypass = false;
                        cardholdername = result.getString("cardholdername");
                        cardname = result.getString("cardname");
                        cardnumber = result.getString("cardnumber");
                        securitycode = result.getString("securitycode");
                        expirydate = result.getString("expirydate");
                        issuingbank = result.getString("issuingbank");
                        cardcolor = result.getString("cardcolor");
                        String month[]=expirydate.split("-");
                        askforpassword = result.getString("passwordprotected");
                        notesd = result.getString("note");
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            cardflag=true;
                            verifypasswordframe.sno=sno;
                            verifypasswordframe.cardholdername=cardholdername;
                            verifypasswordframe.cardname=cardname; 
                            verifypasswordframe.cardnumber=cardnumber;
                            verifypasswordframe.securitycode=securitycode;
                            verifypasswordframe.expirydate=expirydate;
                            verifypasswordframe.issuingbank=issuingbank;
                            verifypasswordframe.cardcolor=cardcolor;
                            verifypasswordframe.passwordprotected=askforpassword;
                            verifypasswordframe.showcredits = showcredit;
                            verifypasswordframe.creditcard = true;
                            verifypasswordframe.month = month;
                            verifypasswordframe.showcredits = showcredit;
                            verifypasswordframe.note = notesd;
                            verifypasswordframe obj = new verifypasswordframe();
                            obj.setVisible(true);
                            obj.idnumber=idnumber;
                            showcreditcard1.flag = false;
                        }
                        else
                        {
                            showcredit.idnumber=idnumber;
                            showcredit.cardnumber.setText(cardnumber);
                            showcredit.sno.setText(sno);
                            showcredit.sno.disable();
                            showcredit.topcardname.setText(cardname);
                            showcredit.cardholdername.setText(cardholdername);
                            showcredit.cardname.setText(cardname);
                            showcredit.securitycode.setText(securitycode);
                            showcredit.issuingbankname.setText(issuingbank);
                            showcredit.cardcolor.setSelectedItem(cardcolor);
                            showcredit.monthbox.setSelectedItem(month[0]);
                            showcredit.yearbox.setSelectedItem(month[1]);
                            showcredit.usernote.setText(notesd);
                            verifypasswordframe.showcredits = showcredit;
                            if(askforpassword.equals("true"))
                            {
                                showcredit.passwordprotected.setSelected(true);
                            }
                            else
                            {
                                showcredit.passwordprotected.setSelected(false);
                                showcredit.cardnumber.setEchoChar((char)0);
                                showcredit.securitycode.setEchoChar((char)0);
                                showcredit.securitypass=true;
                            }
                            showcreditcard1.flag = false;
                        }
                    }
                    else
                    {
                        
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to 3: "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to 4: "+e.getMessage());
            }
        }
    }//GEN-LAST:event_jTable5MouseClicked

    private void jTable6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable6MouseClicked
    verifypasswordframe.showpaypals = showpaypal;
    if(!showpaypal.isVisible())
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "Select * from paypalcards where sno=?";
                    String ssno = jTable6.getValueAt(jTable6.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,login,password,note,passwordprotected,cardname;
                    if(result.next())
                    {
                        sno = result.getString("sno");
                        showcreditcard1.securitypass = false;
                        login = result.getString("login");
                        cardname = result.getString("cardname");
                        password = result.getString("password");
                        note = result.getString("note");
                        askforpassword = result.getString("passwordprotected");
                        showpaypalcard1 obj1 = new showpaypalcard1();
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            paypalcardflag=true;
                            verifypasswordframe.sno=sno;
                            verifypasswordframe.login=login;
                            verifypasswordframe.password=password; 
                            verifypasswordframe.note=note;
                            verifypasswordframe.passwordprotected=askforpassword;
                            verifypasswordframe.cardname = cardname;
                            verifypasswordframe.showpaypals = showpaypal;
                            verifypasswordframe.paypalcard = true;
                            verifypasswordframe.note = note;
                            verifypasswordframe.showpaypals = obj1;
                            verifypasswordframe obj = new verifypasswordframe();
                            obj.setVisible(true);
                            obj.idnumber=idnumber;
                            showpaypal = obj1;
                            //obj1.flag = false;
                        }
                        else
                        {
                            jDesktopPane1.add(obj1);
                            obj1.setVisible(true);
                            showpaypal = obj1;
                            //verifypasswordframe.showcredits = obj1;
                            obj1.login.setText(login);
                            obj1.sno.setText(sno);
                            obj1.sno.disable();
                            obj1.topcardname.setText(cardname);
                            obj1.password.setText(password);
                            obj1.cardname.setText(cardname);
                            obj1.passwordprotected.setSelected(false);
                            obj1.usernote.setText(note);
                            obj1.login.setEchoChar((char)0);
                            obj1.password.setEchoChar((char)0);
                            obj1.securitypass=true;
                            obj1.flag = false;
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this,"NO Records Found!!!");
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
            }
        }
        else   
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "Select * from paypalcards where sno=?";
                    String ssno = jTable6.getValueAt(jTable6.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,login,password,note,passwordprotected,cardname;
                    if(result.next())
                    {
                        sno = result.getString("sno");
                        showcreditcard1.securitypass = false;
                        login = result.getString("login");
                        password = result.getString("password");
                        askforpassword = result.getString("passwordprotected");
                        note = result.getString("note");
                        cardname = result.getString("cardname");
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            paypalcardflag=true;
                            verifypasswordframe.sno=sno;
                            verifypasswordframe.login=login;
                            verifypasswordframe.cardname=cardname; 
                            verifypasswordframe.password=password;
                            verifypasswordframe.passwordprotected=askforpassword;
                            verifypasswordframe.showpaypals = showpaypal;
                            verifypasswordframe.paypalcard = true;
                            verifypasswordframe.showpaypals = showpaypal;
                            verifypasswordframe.note = note;
                            verifypasswordframe obj = new verifypasswordframe();
                            obj.setVisible(true);
                            obj.idnumber=idnumber;
                            showpaypalcard.flag = false;
                        }
                        else
                        {
                            showpaypal.idnumber=idnumber;
                            showpaypal.login.setText(login);
                            showpaypal.sno.setText(sno);
                            showpaypal.sno.disable();
                            showpaypal.topcardname.setText(cardname);
                            showpaypal.login.setText(login);
                            showcredit.cardname.setText(cardname);
                            showpaypal.password.setText(password);
                            showcredit.usernote.setText(note);
                            verifypasswordframe.showpaypals = showpaypal;
                            if(askforpassword.equals("true"))
                            {
                                showpaypal.passwordprotected.setSelected(true);
                            }
                            else
                            {
                                showpaypal.passwordprotected.setSelected(false);
                                showpaypal.login.setEchoChar((char)0);
                                showpaypal.password.setEchoChar((char)0);
                                showpaypal.securitypass=true;
                            }
                            showpaypalcard.flag = false;
                        }
                    }
                    else
                    {
                        
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to 3: "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to 4: "+e.getMessage());
            }
        }
    }//GEN-LAST:event_jTable6MouseClicked

    private void jTable7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable7MouseClicked
    verifypasswordframe.showbanks = showbank;
    if(!showbank.isVisible())
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "Select * from bankcards where sno=?";
                    String ssno = jTable7.getValueAt(jTable7.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,accountholdername,routingnumber,accountnumber,passwordprotected,note,cardname;
                    if(result.next())
                    {
                        sno = result.getString("sno");
                        showpaypalcard.securitypass = false;
                        accountholdername = result.getString("accountholdername");
                        cardname = result.getString("cardname");
                        routingnumber = result.getString("routingnumber");
                        accountnumber = result.getString("accountnumber");
                        note = result.getString("note");
                        askforpassword = result.getString("passwordprotected");
                        showbankcard1 obj1 = new showbankcard1();
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            bankcardflag=true;
                            verifypasswordframe.sno=sno;
                            verifypasswordframe.accountholdername=accountholdername;
                            verifypasswordframe.routingnumber=routingnumber; 
                            verifypasswordframe.accountnumber = accountnumber;
                            verifypasswordframe.note=note;
                            verifypasswordframe.passwordprotected=askforpassword;
                            verifypasswordframe.cardname = cardname;
                            verifypasswordframe.showbanks = showbank;
                            verifypasswordframe.bankcard = true;
                            verifypasswordframe.note = note;
                            verifypasswordframe.showbanks = obj1;
                            verifypasswordframe obj = new verifypasswordframe();
                            obj.setVisible(true);
                            obj.idnumber=idnumber;
                            showbank = obj1;
                            //obj1.flag = false;
                        }
                        else
                        {
                            jDesktopPane1.add(obj1);
                            obj1.setVisible(true);
                            showbank = obj1;
                            //verifypasswordframe.showcredits = obj1;
                            obj1.accountholdername.setText(accountholdername);
                            obj1.sno.setText(sno);
                            obj1.sno.disable();
                            obj1.topcardname.setText(cardname);
                            obj1.routingnumber.setText(routingnumber);
                            obj1.accountnumber.setText(accountnumber);
                            obj1.cardname.setText(cardname);
                            obj1.passwordprotected.setSelected(false);
                            obj1.usernote.setText(note);
                            obj1.accountholdername.setEchoChar((char)0);
                            obj1.routingnumber.setEchoChar((char)0);
                            obj1.accountnumber.setEchoChar((char)0);
                            obj1.securitypass=true;
                            obj1.flag = false;
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this,"NO Records Found!!!");
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
            }
        }
        else   
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "Select * from bankcards where sno=?";
                    String ssno = jTable7.getValueAt(jTable7.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,accountholdername,routingnumber,accountnumber,passwordprotected,note,cardname;
                    if(result.next())
                    {
                        sno = result.getString("sno");
                        showbankcard1.securitypass = false;
                        accountholdername = result.getString("accountholdername");
                        routingnumber = result.getString("routingnumber");
                        accountnumber = result.getString("accountnumber");
                        askforpassword = result.getString("passwordprotected");
                        note = result.getString("note");
                        cardname = result.getString("cardname");
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            bankcardflag=true;
                            verifypasswordframe.sno=sno;
                            verifypasswordframe.accountholdername=accountholdername;
                            verifypasswordframe.routingnumber=routingnumber; 
                            verifypasswordframe.accountnumber = accountnumber;
                            verifypasswordframe.note=note;
                            verifypasswordframe.passwordprotected=askforpassword;
                            verifypasswordframe.cardname = cardname;
                            verifypasswordframe.showbanks = showbank;
                            verifypasswordframe.bankcard = true;
                            verifypasswordframe.note = note;
                            verifypasswordframe.showbanks = showbank;
                            verifypasswordframe obj = new verifypasswordframe();
                            obj.setVisible(true);
                            obj.idnumber=idnumber;
                            showbankcard1.flag = false;
                        }
                        else
                        {
                            showbank.idnumber=idnumber;
                            showbank.accountholdername.setText(accountholdername);
                            showbank.sno.setText(sno);
                            showbank.sno.disable();
                            showbank.topcardname.setText(cardname);
                            showcredit.cardname.setText(cardname);
                            showbank.routingnumber.setText(routingnumber);
                            showbank.accountnumber.setText(accountnumber);
                            showbank.usernote.setText(note);
                            verifypasswordframe.showbanks = showbank;
                            if(askforpassword.equals("true"))
                            {
                                showbank.passwordprotected.setSelected(true);
                            }
                            else
                            {
                                showbank.passwordprotected.setSelected(false);
                                showbank.accountholdername.setEchoChar((char)0);
                                showbank.routingnumber.setEchoChar((char)0);
                                showbank.accountnumber.setEchoChar((char)0);
                                showbank.securitypass=true;
                            }
                            showbankcard1.flag = false;
                        }
                    }
                    else
                    {
                        
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to 3: "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to 4: "+e.getMessage());
            }
        }
    }//GEN-LAST:event_jTable7MouseClicked

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        if(!useraccountchange.isVisible())
        {
            useraccount1 obj = new useraccount1();
            jDesktopPane1.add(obj);
            obj.setVisible(true);
            useraccountchange = obj;
            obj.idnumber = idnumber;
            try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);
                    try
                    {
                        String qu = "select * from users where id=?";
                        PreparedStatement mystatement = myconnection.prepareStatement(qu);
                        mystatement.setString(1,idnumber);
                        //System.out.println("idnumber : "+idnumber);
                        ResultSet result = mystatement.executeQuery();
                        if(result.next())
                        {
                            obj.emailbox.setText(result.getString("userEmail"));
                            obj.email.setText(result.getString("userEmail"));
                            obj.cellphone.setText(result.getString("phoneNo"));
                        }
                        else
                        {
                            //JOptionPane.showMessageDialog(this, "Error in Current Password..");
                        }
                    }
                    catch(Exception e)
                    {
                        JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                }
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void addnewcard1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addnewcard1ActionPerformed
        if(addnewcard1.getSelectedIndex()>0)
        {
            if(addnewcard1.getSelectedItem().equals("ID Card"))
            {
                addidcard obj = new addidcard();
                jDesktopPane1.add(obj);
                obj.setVisible(true);
            }
            else if(addnewcard1.getSelectedItem().equals("Passport"))
            {
                addpassport obj = new addpassport();
                jDesktopPane1.add(obj);
                obj.setVisible(true);
            }
            else if(addnewcard1.getSelectedItem().equals("Driver's License"))
            {
                adddriverslicense obj = new adddriverslicense();
                jDesktopPane1.add(obj);
                obj.setVisible(true);
            }
            else if(addnewcard1.getSelectedItem().equals("Tax Numbers"))
            {
                addtaxnumber obj = new addtaxnumber();
                jDesktopPane1.add(obj);
                obj.setVisible(true);
            }
        }
    }//GEN-LAST:event_addnewcard1ActionPerformed

    private void jTable8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable8MouseClicked
    if(jTable8.getValueAt(jTable8.getSelectedRow(), 2).equals("ID Card"))
    {
    verifypasswordframe.showidcards = showidcard;
    if(!showidcard.isVisible())
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "Select * from idcards where sno=?";
                    String ssno = jTable8.getValueAt(jTable8.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,idcardname,cardnumber,gender,dob,issuedate,expirydate,passwordprotected,note;
                    if(result.next())
                    {
                        sno = result.getString("sno");
                        showpaypalcard.securitypass = false;
                        idcardname = result.getString("cardname");
                        cardnumber = result.getString("cardnumber");
                        gender = result.getString("gender");
                        String dobi = result.getString("dob");
                        dob=dobi;
                        String issuedatee = result.getString("issuedate");
                        issuedate=issuedatee;
                        String expirydatee = result.getString("expirydate");
                        expirydate=expirydatee;
                        note = result.getString("note");
                        askforpassword = result.getString("passwordprotected");                       
                        showidcard1 obj1 = new showidcard1();
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            idcardflag=true;
                            verifypasswordframe.sno=sno;
                            verifypasswordframe.cardnumber=cardnumber;
                            verifypasswordframe.gender=gender; 
                            verifypasswordframe.dob = dobi;
                            verifypasswordframe.issuedate = issuedatee;
                            verifypasswordframe.expirydatee = expirydatee;
                            verifypasswordframe.note=note;
                            verifypasswordframe.passwordprotected=askforpassword;
                            verifypasswordframe.idcardname = idcardname;
                            verifypasswordframe.showidcards = showidcard;
                            verifypasswordframe.idcard = true;
                            verifypasswordframe.note = note;
                            verifypasswordframe.showidcards = obj1;
                            verifypasswordframe obj = new verifypasswordframe();
                            obj.setVisible(true);
                            obj.idnumber=idnumber;
                            showidcard = obj1;
                            //obj1.flag = false;
                        }
                        else
                        {
                            jDesktopPane1.add(obj1);
                            obj1.setVisible(true);
                            showidcard = obj1;
                            //verifypasswordframe.showcredits = obj1;
                            obj1.dobbox.setText(dobi);
                            obj1.issuedatebox.setText(issuedatee);
                            obj1.expirydatebox.setText(expirydatee);
                            obj1.cardnumber.setText(cardnumber);
                            obj1.idcardname.setText(idcardname);
                            obj1.sno.setText(sno);
                            obj1.sno.disable();
                            obj1.topcardname.setText(idcardname);
                            if(gender.equals("Male"))
                            {
                                obj1.malebox.setSelected(true);
                            }
                            else
                            {
                                obj1.femalebox.setSelected(true);
                            }
                            obj1.passwordprotected.setSelected(false);
                            obj1.usernote.setText(note);
                            obj1.securitypass=true;
                            obj1.flag = false;
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null,"NO Records Found!!!");
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
            }
        }
        else   
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "Select * from idcards where sno=?";
                    String ssno = jTable8.getValueAt(jTable8.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,idcardname,cardnumber,gender,dob,issuedate,expirydate,passwordprotected,note;
                    if(result.next())
                    {
                        sno = result.getString("sno");
                        showpaypalcard.securitypass = false;
                        idcardname = result.getString("cardname");
                        cardnumber = result.getString("cardnumber");
                        gender = result.getString("gender");
                        String dobi = result.getString("dob");
                        dob=dobi;
                        String issuedatee = result.getString("issuedate");
                        issuedate=issuedatee;
                        String expirydatee = result.getString("expirydate");
                        expirydate=expirydatee;
                        note = result.getString("note");
                        askforpassword = result.getString("passwordprotected");
                        showbank.topcardname.setText(idcardname);
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            idcardflag=true;
                            verifypasswordframe.sno=sno;
                            verifypasswordframe.cardnumber=cardnumber;
                            verifypasswordframe.gender=gender; 
                            verifypasswordframe.dob = dobi;
                            verifypasswordframe.issuedate = issuedatee;
                            verifypasswordframe.expirydatee = expirydatee;
                            verifypasswordframe.note=note;
                            verifypasswordframe.passwordprotected=askforpassword;
                            verifypasswordframe.idcardname = idcardname;
                            verifypasswordframe.showidcards = showidcard;
                            verifypasswordframe.idcard = true;
                            verifypasswordframe.note = note;
                            verifypasswordframe.showidcards = showidcard;
                            verifypasswordframe obj = new verifypasswordframe();
                            obj.setVisible(true);
                            obj.idnumber=idnumber;
                            showidcard.flag = false;
                        }
                        else
                        {
                            showidcard.dobbox.setText(dobi);
                            showidcard.issuedatebox.setText(issuedatee);
                            showidcard.expirydatebox.setText(expirydatee);
                            showidcard.cardnumber.setText(cardnumber);
                            showidcard.idcardname.setText(idcardname);
                            showidcard.sno.setText(sno);
                            showidcard.sno.disable();
                            showidcard.topcardname.setText(idcardname);
                            if(gender.equals("Male"))
                            {
                                showidcard.malebox.setSelected(true);
                            }
                            else
                            {
                                showidcard.femalebox.setSelected(true);
                            }
                            showidcard.passwordprotected.setSelected(false);
                            showidcard.usernote.setText(note);
                            showidcard.securitypass=true;
                            showidcard.flag = false;
                        }
                    }
                    else
                    {
                        
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to 3: "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to 4: "+e.getMessage());
            }
        }
    }
    else if(jTable8.getValueAt(jTable8.getSelectedRow(), 2).equals("Passport"))
    {
    verifypasswordframe.showpassportcards = showpassportcard;
    if(!showpassportcard.isVisible())
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "Select * from idcards where sno=?";
                    String ssno = jTable8.getValueAt(jTable8.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,idcardname,cardnumber,gender,dob,issuedate,expirydate,passwordprotected,note,placeofissue;
                    if(result.next())
                    {
                        sno = result.getString("sno");
                        showpaypalcard.securitypass = false;
                        idcardname = result.getString("cardname");
                        cardnumber = result.getString("cardnumber");
                        gender = result.getString("gender");
                        String dobi = result.getString("dob");
                        placeofissue = result.getString("placeofissue");
                        dob=dobi;
                        String issuedatee = result.getString("issuedate");
                        issuedate=issuedatee;
                        String expirydatee = result.getString("expirydate");
                        expirydate=expirydatee;
                        note = result.getString("note");
                        askforpassword = result.getString("passwordprotected");                       
                        showpassportcard1 obj1 = new showpassportcard1();
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            passportcardflag=true;
                            verifypasswordframe.sno=sno;
                            verifypasswordframe.cardnumber=cardnumber;
                            verifypasswordframe.gender=gender; 
                            verifypasswordframe.dob = dobi;
                            verifypasswordframe.placeofissue = placeofissue;
                            verifypasswordframe.issuedate = issuedatee;
                            verifypasswordframe.expirydatee = expirydatee;
                            verifypasswordframe.note=note;
                            verifypasswordframe.passwordprotected=askforpassword;
                            verifypasswordframe.idcardname = idcardname;
                            verifypasswordframe.showpassportcards = showpassportcard;
                            verifypasswordframe.passportcard = true;
                            verifypasswordframe.note = note;
                            verifypasswordframe.showpassportcards = obj1;
                            verifypasswordframe obj = new verifypasswordframe();
                            obj.setVisible(true);
                            obj.idnumber=idnumber;
                            showpassportcard = obj1;
                            //obj1.flag = false;
                        }
                        else
                        {
                            jDesktopPane1.add(obj1);
                            obj1.setVisible(true);
                            showpassportcard = obj1;
                            //verifypasswordframe.showcredits = obj1;
                            obj1.dobbox.setText(dobi);
                            obj1.issuedatebox.setText(issuedatee);
                            obj1.expirydatebox.setText(expirydatee);
                            obj1.cardnumber.setText(cardnumber);
                            obj1.idcardname.setText(idcardname);
                            obj1.sno.setText(sno);
                            obj1.sno.disable();
                            obj1.placeofissue.setText(placeofissue);
                            obj1.topcardname.setText(idcardname);
                            if(gender.equals("Male"))
                            {
                                obj1.malebox.setSelected(true);
                            }
                            else
                            {
                                obj1.femalebox.setSelected(true);
                            }
                            obj1.passwordprotected.setSelected(false);
                            obj1.usernote.setText(note);
                            obj1.securitypass=true;
                            obj1.flag = false;
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null,"NO Records Found!!!");
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
            }
        }
        else   
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "Select * from idcards where sno=?";
                    String ssno = jTable8.getValueAt(jTable8.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,idcardname,cardnumber,gender,dob,issuedate,expirydate,passwordprotected,note,placeofissue;
                    if(result.next())
                    {
                        sno = result.getString("sno");
                        showpaypalcard.securitypass = false;
                        idcardname = result.getString("cardname");
                        cardnumber = result.getString("cardnumber");
                        gender = result.getString("gender");
                        String dobi = result.getString("dob");
                        placeofissue = result.getString("placeofissue");
                        dob=dobi;
                        String issuedatee = result.getString("issuedate");
                        issuedate=issuedatee;
                        String expirydatee = result.getString("expirydate");
                        expirydate=expirydatee;
                        note = result.getString("note");
                        askforpassword = result.getString("passwordprotected");
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            passportcardflag=true;
                            verifypasswordframe.sno=sno;
                            verifypasswordframe.cardnumber=cardnumber;
                            verifypasswordframe.gender=gender; 
                            verifypasswordframe.dob = dobi;
                            verifypasswordframe.issuedate = issuedatee;
                            verifypasswordframe.expirydatee = expirydatee;
                            verifypasswordframe.note=note;
                            verifypasswordframe.placeofissue = placeofissue;
                            verifypasswordframe.passwordprotected=askforpassword;
                            verifypasswordframe.idcardname = idcardname;
                            verifypasswordframe.showidcards = showidcard;
                            verifypasswordframe.passportcard = true;
                            verifypasswordframe.note = note;
                            verifypasswordframe.showpassportcards = showpassportcard;
                            verifypasswordframe obj = new verifypasswordframe();
                            obj.setVisible(true);
                            obj.idnumber=idnumber;
                            showpassportcard.flag = false;
                        }
                        else
                        {
                            showpassportcard.dobbox.setText(dobi);
                            showpassportcard.issuedatebox.setText(issuedatee);
                            showpassportcard.expirydatebox.setText(expirydatee);
                            showpassportcard.cardnumber.setText(cardnumber);
                            showpassportcard.idcardname.setText(idcardname);
                            showpassportcard.sno.setText(sno);
                            showpassportcard.sno.disable();
                            showpassportcard.topcardname.setText(idcardname);
                            if(gender.equals("Male"))
                            {
                                showpassportcard.malebox.setSelected(true);
                            }
                            else
                            {
                                showpassportcard.femalebox.setSelected(true);
                            }
                            showpassportcard.passwordprotected.setSelected(false);
                            showpassportcard.usernote.setText(note);
                            showpassportcard.securitypass=true;
                            showpassportcard.flag = false;
                        }
                    }
                    else
                    {
                        
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to 3: "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to 4: "+e.getMessage());
            }
        }
    }
    else if(jTable8.getValueAt(jTable8.getSelectedRow(), 2).equals("Driver's License"))
    {
    verifypasswordframe.showdriverslicensecards = showdriverslicensecard;
    if(!showdriverslicensecard.isVisible())
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "Select * from idcards where sno=?";
                    String ssno = jTable8.getValueAt(jTable8.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,idcardname,cardnumber,gender,dob,issuedate,expirydate,passwordprotected,note,state;
                    if(result.next())
                    {
                        sno = result.getString("sno");
                        showpaypalcard.securitypass = false;
                        idcardname = result.getString("cardname");
                        cardnumber = result.getString("cardnumber");
                        gender = result.getString("gender");
                        String dobi = result.getString("dob");
                        state = result.getString("state");
                        dob=dobi;
                        String issuedatee = result.getString("issuedate");
                        issuedate=issuedatee;
                        String expirydatee = result.getString("expirydate");
                        expirydate=expirydatee;
                        note = result.getString("note");
                        askforpassword = result.getString("passwordprotected");                       
                        showdriverslicensecard1 obj1 = new showdriverslicensecard1();
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            driverslicensecardflag=true;
                            verifypasswordframe.sno=sno;
                            verifypasswordframe.cardnumber=cardnumber;
                            verifypasswordframe.gender=gender; 
                            verifypasswordframe.dob = dobi;
                            verifypasswordframe.state = state;
                            verifypasswordframe.issuedate = issuedatee;
                            verifypasswordframe.expirydatee = expirydatee;
                            verifypasswordframe.note=note;
                            verifypasswordframe.passwordprotected=askforpassword;
                            verifypasswordframe.idcardname = idcardname;
                            verifypasswordframe.showdriverslicensecards = showdriverslicensecard;
                            verifypasswordframe.driverslicensecard = true;
                            verifypasswordframe.note = note;
                            verifypasswordframe.showdriverslicensecards = obj1;
                            verifypasswordframe obj = new verifypasswordframe();
                            obj.setVisible(true);
                            obj.idnumber=idnumber;
                            showdriverslicensecard = obj1;
                            //obj1.flag = false;
                        }
                        else
                        {
                            jDesktopPane1.add(obj1);
                            obj1.setVisible(true);
                            showdriverslicensecard = obj1;
                            //verifypasswordframe.showcredits = obj1;
                            obj1.dobbox.setText(dobi);
                            obj1.issuedatebox.setText(issuedatee);
                            obj1.expirydatebox.setText(expirydatee);
                            obj1.cardnumber.setText(cardnumber);
                            obj1.idcardname.setText(idcardname);
                            obj1.sno.setText(sno);
                            obj1.sno.disable();
                            obj1.state.setText(state);
                            obj1.topcardname.setText(idcardname);
                            if(gender.equals("Male"))
                            {
                                obj1.malebox.setSelected(true);
                            }
                            else
                            {
                                obj1.femalebox.setSelected(true);
                            }
                            obj1.passwordprotected.setSelected(false);
                            obj1.usernote.setText(note);
                            obj1.securitypass=true;
                            obj1.flag = false;
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null,"NO Records Found!!!");
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
            }
        }
        else   
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "Select * from idcards where sno=?";
                    String ssno = jTable8.getValueAt(jTable8.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,idcardname,cardnumber,gender,dob,issuedate,expirydate,passwordprotected,note,state;
                    if(result.next())
                    {
                        sno = result.getString("sno");
                        showpaypalcard.securitypass = false;
                        idcardname = result.getString("cardname");
                        cardnumber = result.getString("cardnumber");
                        gender = result.getString("gender");
                        String dobi = result.getString("dob");
                        state = result.getString("state");
                        dob=dobi;
                        String issuedatee = result.getString("issuedate");
                        issuedate=issuedatee;
                        String expirydatee = result.getString("expirydate");
                        expirydate=expirydatee;
                        note = result.getString("note");
                        askforpassword = result.getString("passwordprotected");
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            passportcardflag=true;
                            verifypasswordframe.sno=sno;
                            verifypasswordframe.cardnumber=cardnumber;
                            verifypasswordframe.gender=gender; 
                            verifypasswordframe.dob = dobi;
                            verifypasswordframe.issuedate = issuedatee;
                            verifypasswordframe.expirydatee = expirydatee;
                            verifypasswordframe.note=note;
                            verifypasswordframe.state = state;
                            verifypasswordframe.passwordprotected=askforpassword;
                            verifypasswordframe.idcardname = idcardname;
                            verifypasswordframe.showdriverslicensecards = showdriverslicensecard;
                            verifypasswordframe.passportcard = true;
                            verifypasswordframe.note = note;
                            verifypasswordframe.showdriverslicensecards = showdriverslicensecard;
                            verifypasswordframe obj = new verifypasswordframe();
                            obj.setVisible(true);
                            obj.idnumber=idnumber;
                            showdriverslicensecard.flag = false;
                        }
                        else
                        {
                            showdriverslicensecard.dobbox.setText(dobi);
                            showdriverslicensecard.issuedatebox.setText(issuedatee);
                            showdriverslicensecard.expirydatebox.setText(expirydatee);
                            showdriverslicensecard.cardnumber.setText(cardnumber);
                            showdriverslicensecard.idcardname.setText(idcardname);
                            showdriverslicensecard.sno.setText(sno);
                            showdriverslicensecard.sno.disable();
                            showdriverslicensecard.topcardname.setText(idcardname);
                            if(gender.equals("Male"))
                            {
                                showdriverslicensecard.malebox.setSelected(true);
                            }
                            else
                            {
                                showdriverslicensecard.femalebox.setSelected(true);
                            }
                            showdriverslicensecard.passwordprotected.setSelected(false);
                            showdriverslicensecard.usernote.setText(note);
                            showdriverslicensecard.securitypass=true;
                            showdriverslicensecard.flag = false;
                        }
                    }
                    else
                    {
                        
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to 3: "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to 4: "+e.getMessage());
            }
        }
    }
    if(jTable8.getValueAt(jTable8.getSelectedRow(), 2).equals("Tax Numbers"))
    {
    verifypasswordframe.showtaxcards = showtaxcard;
    if(!showtaxcard.isVisible())
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "Select * from idcards where sno=?";
                    String ssno = jTable8.getValueAt(jTable8.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,idcardname,cardnumber,passwordprotected,note;
                    if(result.next())
                    {
                        sno = result.getString("sno");
                        showpaypalcard.securitypass = false;
                        idcardname = result.getString("cardname");
                        cardnumber = result.getString("cardnumber");
                        note = result.getString("note");
                        askforpassword = result.getString("passwordprotected");                       
                        showtaxcard1 obj1 = new showtaxcard1();
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            taxcardflag=true;
                            verifypasswordframe.sno=sno;
                            verifypasswordframe.cardnumber=cardnumber;
                            verifypasswordframe.note=note;
                            verifypasswordframe.passwordprotected=askforpassword;
                            verifypasswordframe.idcardname = idcardname;
                            verifypasswordframe.showtaxcards = showtaxcard;
                            verifypasswordframe.taxcard = true;
                            verifypasswordframe.note = note;
                            verifypasswordframe.showtaxcards = obj1;
                            verifypasswordframe obj = new verifypasswordframe();
                            obj.setVisible(true);
                            obj.idnumber=idnumber;
                            showtaxcard = obj1;
                            //obj1.flag = false;
                        }
                        else
                        {
                            jDesktopPane1.add(obj1);
                            obj1.setVisible(true);
                            showtaxcard = obj1;
                            //verifypasswordframe.showcredits = obj1;
                            obj1.cardnumber.setText(cardnumber);
                            obj1.idcardname.setText(idcardname);
                            obj1.sno.setText(sno);
                            obj1.sno.disable();
                            obj1.topcardname.setText(idcardname);
                            obj1.passwordprotected.setSelected(false);
                            obj1.usernote.setText(note);
                            obj1.securitypass=true;
                            obj1.flag = false;
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null,"NO Records Found!!!");
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
            }
        }
        else   
        {
            try
            {
                Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "Select * from idcards where sno=?";
                    String ssno = jTable8.getValueAt(jTable8.getSelectedRow(),0).toString();
                    //System.out.println("SSNO : "+ssno);
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, ssno);
                    ResultSet result = mystatement.executeQuery();
                    String sno,idcardname,cardnumber,passwordprotected,note;
                    if(result.next())
                    {
                        sno = result.getString("sno");
                        showpaypalcard.securitypass = false;
                        idcardname = result.getString("cardname");
                        cardnumber = result.getString("cardnumber");
                        note = result.getString("note");
                        askforpassword = result.getString("passwordprotected");
                        if(!askforpassword.equalsIgnoreCase("false"))
                        {
                            taxcardflag=true;
                            verifypasswordframe.sno=sno;
                            verifypasswordframe.cardnumber=cardnumber;
                            verifypasswordframe.note=note;
                            verifypasswordframe.passwordprotected=askforpassword;
                            verifypasswordframe.idcardname = idcardname;
                            verifypasswordframe.showtaxcards = showtaxcard;
                            verifypasswordframe.taxcard = true;
                            verifypasswordframe.note = note;
                            verifypasswordframe.showtaxcards = showtaxcard;
                            verifypasswordframe obj = new verifypasswordframe();
                            obj.setVisible(true);
                            obj.idnumber=idnumber;
                            showtaxcard.flag = false;
                        }
                        else
                        {
                            showdriverslicensecard.cardnumber.setText(cardnumber);
                            showdriverslicensecard.idcardname.setText(idcardname);
                            showdriverslicensecard.sno.setText(sno);
                            showdriverslicensecard.sno.disable();
                            showdriverslicensecard.topcardname.setText(idcardname);
                            showdriverslicensecard.passwordprotected.setSelected(false);
                            showdriverslicensecard.usernote.setText(note);
                            showdriverslicensecard.securitypass=true;
                            showdriverslicensecard.flag = false;
                        }
                    }
                    else
                    {
                        
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to 3: "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error Due to 4: "+e.getMessage());
            }
        }
    }
    }//GEN-LAST:event_jTable8MouseClicked

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        addreceipt obj = new addreceipt();
        jDesktopPane1.add(obj);
        obj.setVisible(true);
    }//GEN-LAST:event_jButton13ActionPerformed

    private void search4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_search4MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_search4MouseClicked

    private void search4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search4KeyPressed
        if(search4.getForeground()!=Color.BLACK)
        {
            if(search4.getText().equals("Search"))
            {
                search4.setText("");
                search4.setCaretPosition(0);
            }
        }
        search4.setForeground(Color.BLACK);
    }//GEN-LAST:event_search4KeyPressed

    private void search4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search4KeyReleased
        if(search4.getText().isEmpty())
        {
            search4.setText("Search");
            search4.setCaretPosition(0);
            search4.setForeground(new Color(205,205,205));
            searchcard("", jTable5, "creditcards");
            searchcard("", jTable6, "paypalcards");
            searchcard("", jTable7, "bankcards");
            jTable5.removeRowSelectionInterval(0, 0);
            jTable6.removeRowSelectionInterval(0, 0);
            jTable7.removeRowSelectionInterval(0, 0);
        }
        else if(evt.getExtendedKeyCode()!=KeyEvent.VK_ENTER&&evt.getExtendedKeyCode()!=KeyEvent.VK_SPACE)
        {
            searchcard(search4.getText(), jTable5, "creditcards");
            searchcard(search4.getText(), jTable6, "paypalcards");
            searchcard(search4.getText(), jTable7, "bankcards");
        }
    }//GEN-LAST:event_search4KeyReleased

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        if(!search4.getText().equalsIgnoreCase("Search"))
        {
            searchcard(search4.getText(), jTable5, "creditcards");
            searchcard(search4.getText(), jTable6, "paypalcards");
            searchcard(search4.getText(), jTable7, "bankcards");
        }
    }//GEN-LAST:event_jButton14ActionPerformed

    private void search4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_search4ActionPerformed

    private void search5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_search5MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_search5MouseClicked

    private void search5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_search5ActionPerformed

    private void search5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search5KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_search5KeyPressed

    private void search5KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search5KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_search5KeyReleased

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton15ActionPerformed

    private void search6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_search6MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_search6MouseClicked

    private void search6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_search6ActionPerformed

    private void search6KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search6KeyPressed
        if(search6.getForeground()!=Color.BLACK)
        {
            if(search6.getText().equals("Search"))
            {
                search6.setText("");
                search6.setCaretPosition(0);
            }
        }
        search6.setForeground(Color.BLACK);
    }//GEN-LAST:event_search6KeyPressed

    private void search6KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search6KeyReleased
        if(search6.getText().isEmpty())
        {
            search6.setText("Search");
            search6.setCaretPosition(0);
            search6.setForeground(new Color(205,205,205));
            searchcard("", jTable8, "idcards");
            jTable8.removeRowSelectionInterval(0, 0);
        }
        else if(evt.getExtendedKeyCode()!=KeyEvent.VK_ENTER&&evt.getExtendedKeyCode()!=KeyEvent.VK_SPACE)
        {
            searchcard(search6.getText(), jTable8, "idcards");
        }
    }//GEN-LAST:event_search6KeyReleased

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        if(search6.getText().isEmpty())
        {
            search6.setText("Search");
            search6.setCaretPosition(0);
            search6.setForeground(new Color(205,205,205));
            searchcard("", jTable8, "idcards");
        }
        else
        {
            searchcard(search6.getText(), jTable8, "idcards");
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jTable9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable9MouseClicked
        showreceipts obj = new showreceipts();
        obj.sno.setText(jTable9.getValueAt(jTable9.getSelectedRow(), 0).toString());
        obj.date.setText(jTable9.getValueAt(jTable9.getSelectedRow(), 1).toString());
        obj.topcardname.setText(jTable9.getValueAt(jTable9.getSelectedRow(), 4).toString());
        obj.totalprice.setText(jTable9.getValueAt(jTable9.getSelectedRow(), 3).toString());
        obj.place.setText(jTable9.getValueAt(jTable9.getSelectedRow(), 4).toString());
        obj.currency.setText(jTable9.getValueAt(jTable9.getSelectedRow(), 2).toString());
        jDesktopPane1.add(obj);
        obj.setVisible(true);
     
    }//GEN-LAST:event_jTable9MouseClicked

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        usernewdetail obj = new usernewdetail();
        jDesktopPane1.add(obj);
        try
        {
            System.out.println(1);
            Image simg=ImageIO.read(new File ("Photo\\default.jpg")).getScaledInstance(obj.photo.getWidth(),obj.photo.getHeight(),Image.SCALE_DEFAULT);
            obj.photo.setIcon(new ImageIcon(simg));
            System.out.println(obj.photo.getIcon());
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Error in Reading the file...");
        }
        obj.setVisible(true);
        obj.click=false;
        System.out.println(1);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTable10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable10MouseClicked
        usernewdetail.click = true;
        usernewdetail obj = new usernewdetail();
        jDesktopPane1.add(obj);
        //System.out.println("Photo\\"+obj.photo.getIcon());
        obj.setVisible(true);
        obj.sno = jTable10.getValueAt(jTable10.getSelectedRow(), 0).toString();
        try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                    try
                    {
                        String query3 = "Select * from usernewdetail where sno=?";
                        PreparedStatement mystat2 = myconnection.prepareStatement(query3);
                        mystat2.setString(1, obj.sno);
                        ResultSet myresult3 = mystat2.executeQuery();
                        DefaultTableModel mymodel3;
                        String sno, title, firstname, middlename, lastname, defaultlogin, dob, email, emailtype, imagename;
                        if(myresult3.next())
                        {
                            do
                            {
                                sno = myresult3.getString("sno");
                                imagename = myresult3.getString("imagename");
                                title = myresult3.getString("title");
                                firstname = myresult3.getString("firstname");
                                middlename = myresult3.getString("middlename");
                                lastname = myresult3.getString("lastname");
                                email = myresult3.getString("email");
                                defaultlogin = myresult3.getString("defaultlogin");
                                emailtype = myresult3.getString("emailtype");
                                dob = myresult3.getString("dob");
                                obj.titlebox.setSelectedItem(title);
                                String j="Photo\\"+imagename;
                                Image simg=ImageIO.read(new File (j)).getScaledInstance(obj.photo.getWidth(),obj.photo.getHeight(),Image.SCALE_DEFAULT);
                                obj.photo.setIcon(new ImageIcon(simg));
                                obj.oldimage = imagename;
                                obj.firstnamebox.setText(firstname);
                                obj.middlenamebox.setText(middlename);
                                obj.lastnamebox.setText(lastname);
                                obj.emailbox.setText(email);
                                obj.emailtypebox.setSelectedItem(emailtype);
                                obj.defaultloginbox.setText(defaultlogin);
                                obj.dobbox.setText(dob);
                                obj.username.setText(firstname+" "+lastname);
                            }
                            while(myresult3.next());
                        }
                    }
                    catch(Exception e)
                    {
                          e.printStackTrace();
                          JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "ERROR : "+e.getMessage());
                }
    }//GEN-LAST:event_jTable10MouseClicked

    
    /**
     * @param args the command line argument
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dashlane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dashlane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dashlane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dashlane.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
              dashlane obj =  new dashlane();
              obj.setVisible(true);
              obj.passbox.doClick();
              obj.securitybox.doClick();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> addnewcard;
    private javax.swing.JComboBox<String> addnewcard1;
    private javax.swing.JComboBox<String> addnewnote;
    public static javax.swing.JPanel idspanel;
    public static javax.swing.JButton idspanelbox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    public static javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    public static javax.swing.JTable jTable10;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    public static javax.swing.JTable jTable6;
    private javax.swing.JTable jTable7;
    private javax.swing.JTable jTable8;
    public static javax.swing.JTable jTable9;
    public static javax.swing.JButton passbox;
    private javax.swing.JPanel passwordpanel;
    public static javax.swing.JButton paymentsbox;
    private javax.swing.JPanel paymentspanel;
    public static javax.swing.JButton personalinfobox;
    private javax.swing.JPanel personalinfopanel;
    public static javax.swing.JButton receiptspanelbox;
    private javax.swing.JPanel recieptspanel;
    private javax.swing.JTextField search;
    private javax.swing.JTextField search1;
    private javax.swing.JTextField search2;
    private javax.swing.JTextField search3;
    private javax.swing.JTextField search4;
    private javax.swing.JTextField search5;
    private javax.swing.JTextField search6;
    public static javax.swing.JButton securenotesbox;
    private javax.swing.JPanel securenotespanel;
    public static javax.swing.JButton securitybox;
    private javax.swing.JPanel securitypanel;
    // End of variables declaration//GEN-END:variables
}
