/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package password_manager;

import java.awt.Component;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sunnyladdy
 */
public class AddPassCategory extends javax.swing.JInternalFrame implements mydbvariables{

    /**
     * Creates new form AddPassCategory
     */
    boolean flag = false;
    public AddPassCategory() {
        initComponents();
        try
        {
            Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "select * from addedpasscat";
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
                    ResultSet myresult= mystatement.executeQuery();
                    String Category;
                    if(myresult.next())
                    {
                        do
                        {   
                            Category = myresult.getString("category");
                            mymodel.addRow(new Object[]{Category});
                        }
                        while(myresult.next());
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this, "No User Categories..\nAdd Some Categories..");
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
        }
        catch(Exception e)
        {
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setClosable(true);
        setTitle("Password Categories");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setBackground(new java.awt.Color(37, 180, 30));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Done");
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/plus_icon.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/negative_icon.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 133, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Your Catgory"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setHeaderValue("Your Catgory");
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
        mymodel.addRow(new Object[]{""});
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
        int row = jTable1.getSelectedRow();
        int q = count();
        boolean error = false;
        int id = jTable1.getRowCount();
        if(id==0)
        {
            error = true;
            JOptionPane.showMessageDialog(this, "No Items Found");
        }
        if(error!=true)
        {
        if(id<q+1)
        {
        try
        {
            Connection myconnection = DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);
            try
            {
                String query = "DELETE FROM `addedpasscat` WHERE id=?";
                PreparedStatement obj = myconnection.prepareStatement(query);
                obj.setString(1, String.valueOf(id));
                if(obj.executeUpdate()>0)
                {
                    JOptionPane.showMessageDialog(this,"Category Deleted Successfully");
                    mymodel.removeRow(jTable1.getSelectedRow());
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "Error in Deleting the Category");
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
            }
            finally
            {
                myconnection.close();
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
        }
        }
        else
        {
            mymodel.removeRow(row);
        }
        }
        flag=true;
        error = false;
        jButton1.doClick();
    }//GEN-LAST:event_jButton3ActionPerformed
    
    public static void simulateEnterKey(Component c) {
    try {
        KeyEvent ke = new KeyEvent(c, KeyEvent.KEY_RELEASED, System.currentTimeMillis(), -1, KeyEvent.VK_ENTER, (char) KeyEvent.VK_ENTER);
        c.requestFocusInWindow();
        dispatchEvent(ke, c);
    } catch (Exception ex) { }
}
 
private static void dispatchEvent(final KeyEvent ke, final Component   comp) throws Exception   {
    if (!SwingUtilities.isEventDispatchThread()) {
        SwingUtilities.invokeAndWait(new Runnable  () {
            @Override
            public void run() {
                comp.dispatchEvent(ke);
            }
        });
    } else {
        comp.dispatchEvent(ke);
    }
}
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
        //jTable1.addRowSelectionInterval(0, 0);
        simulateEnterKey(jTable1);
        try
        {
            Robot bot = new Robot();
            bot.setAutoDelay(250);
            bot.keyPress(java.awt.event.KeyEvent.VK_ENTER);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Error in Clicking the Enter Key!!!");
        }
        int q = jTable1.getRowCount();    //3
        //System.out.println("rows : "+q);
        int rowsindatabase = count();     //1
        System.out.println("rows in database : "+rowsindatabase);
        int newrows = q-rowsindatabase;   //2
        int a=0;
        while(a<q)                        //0<3
        {
            if(a<rowsindatabase)          //0<1
            {
                try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);
                    try
                    {
                        String query = "Update `addedpasscat` set category=? where id=?";
                        String We = new String();
                        PreparedStatement obj = myconnection.prepareStatement(query);
                        obj.setString(1, jTable1.getValueAt(a,0).toString());
                        obj.setString(2, String.valueOf(a+1));
                        System.out.println("Query Update : "+obj.toString());
                        if(obj.executeUpdate()>0)
                        {
                            //JOptionPane.showMessageDialog(this,"Category Saved Successfully");
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "Error in Saving the Category");
                        }
                    }
                    catch(Exception e)
                    {
                        JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                }
            }
            else
            {
                try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);
                    try
                    {
                        String query = "INSERT INTO `addedpasscat`(`category`, `id`) VALUES (?,?)";
                        PreparedStatement obj = myconnection.prepareStatement(query);
                        obj.setString(1, jTable1.getValueAt(a,0).toString());
                        obj.setString(2, String.valueOf(a+1));
                        System.out.println("Query : "+obj.toString());
                        if(obj.executeUpdate()>0)
                        {
                            //JOptionPane.showMessageDialog(this,"Category Saved Successfully");
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "Error in Saving the Category");
                        }
                    }
                    catch(Exception e)
                    {
                        JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                }
            }
            a++;
        }
        a=0;
        if(flag!=true)
        {
            flag = false;
            this.dispose();
        }
        flag = false;
    }//GEN-LAST:event_jButton1ActionPerformed

    public int count()
    {
        int q=0;
        try
        {
            Connection myconnection = DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);
            try
            {
                String query = "select * from addedpasscat";
                PreparedStatement obj = myconnection.prepareStatement(query);
                ResultSet result = obj.executeQuery();
                if(result.next())
                {
                    do
                    {
                    q++;
                    }
                    while(result.next());
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
            }
            finally
            {
                myconnection.close();
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
        }
        return q;
    }
    
    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
    
    }//GEN-LAST:event_jTable1KeyReleased

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        
    }//GEN-LAST:event_jTable1KeyPressed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
  
    }//GEN-LAST:event_jTable1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
