/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package password_manager;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Robot;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.sql.*;
import javafx.scene.input.KeyEvent;
import javax.swing.*;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sunnyladdy
 */
public class showreceipts extends javax.swing.JInternalFrame implements mydbvariables{

    /**
     * Creates new form showreceipts
     */
    boolean flag = false;
    public showreceipts() {
        initComponents();
    }
    
    public int counttotal()
    {
        int q=jTable1.getRowCount();
        System.out.println("Total Rows : "+q);
        int a=0;
        int total = 0;
        while(a<q)
        {
            if(!jTable1.getValueAt(a, 2).equals(""))
            {
                total = total + Integer.parseInt(jTable1.getValueAt(a, 2).toString());
            }
            a++;
        }
        return total;
    }
    
    public int count()
    {
        int q=0;
        try
        {
            Connection myconnection = DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);
            try
            {
                String query = "select * from items where id=? and recieptnumber=?";
                PreparedStatement obj = myconnection.prepareStatement(query);
                obj.setString(1,dashlane.idnumber);
                obj.setString(2,sno.getText());
                ResultSet result = obj.executeQuery();
                if(result.next())
                {
                    do
                    {
                    q++;
                    }
                    while(result.next());
                }
            }
            catch(Exception e)
            {
                System.out.println(1);
                JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
            }
            finally
            {
                myconnection.close();
            }
        }
        catch(Exception e)
        {
            System.out.println(2);
            JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
        }
        return q;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        sno = new javax.swing.JLabel();
        date = new javax.swing.JLabel();
        topcardname = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        currency = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        update_btn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        totalprice = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        place = new javax.swing.JTextField();
        delete_btn = new javax.swing.JButton();
        printbutton = new javax.swing.JButton();

        setClosable(true);
        setTitle("Receipt");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        sno.setText("0");

        date.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        date.setForeground(new java.awt.Color(255, 255, 255));
        date.setText("date");

        topcardname.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        topcardname.setForeground(new java.awt.Color(255, 255, 255));
        topcardname.setText("title");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/images (1).jpg"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Currency");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/plus_icon.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/password_manager/images/negative_icon.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sno", "Item", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jTable1MouseMoved(evt);
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        update_btn.setText("Update");
        update_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_btnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Total");

        totalprice.setText("0");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Place\\Website");

        delete_btn.setText("Delete");
        delete_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_btnActionPerformed(evt);
            }
        });

        printbutton.setText("Print");
        printbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printbuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(topcardname, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addComponent(sno))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(totalprice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(delete_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(printbutton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(update_btn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(currency, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(place, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(topcardname, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(sno))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(currency))))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(place, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalprice, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addComponent(delete_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(printbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(update_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setBounds(0, 0, 280, 521);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
        int total=counttotal();
        totalprice.setText(String.valueOf(total));
        mymodel.addRow(new Object[]{0,"",""});
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
        int row = jTable1.getSelectedRow();
        flag = true;
        boolean error=false;
        int id = jTable1.getRowCount();
        if(id==0)
        {
            error = true;
            JOptionPane.showMessageDialog(this, "No Items Found");
        } 
        if(error!=true)
        {
            if(getvalue.exists(Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString())))
            {
                try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);
                    try
                    {
                        String query = "DELETE FROM `items` WHERE sno=?";
                        PreparedStatement obj = myconnection.prepareStatement(query);
                        obj.setString(1, jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
                        if(obj.executeUpdate()>0)
                        {
                            JOptionPane.showMessageDialog(this,"Item Deleted Successfully");
                            mymodel.removeRow(jTable1.getSelectedRow());
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "Error in Deleting the Item");
                        }
                    }
                    catch(Exception e)
                    {
                        System.out.println(3);
                        JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
                catch(Exception e)
                {
                    System.out.println(4);
                    JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                }
            }
            else
            {
                mymodel.removeRow(jTable1.getSelectedRow());
            }
        }
        error = false;
        int total=counttotal();
        totalprice.setText(String.valueOf(total));
    }//GEN-LAST:event_jButton3ActionPerformed

    private void update_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_btnActionPerformed
        //jTable1.resetKeyboardActions();
        try
        {
            Robot bot = new Robot();
            bot.setAutoDelay(250);
            bot.keyPress(java.awt.event.KeyEvent.VK_ENTER);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Error in Clicking the Enter Key!!!");
        }
        int q = jTable1.getRowCount();    //3
        //System.out.println("rows : "+q);
        int rowsindatabase = count();     //1
        System.out.println("rows in database : "+rowsindatabase);
        int newrows = q-rowsindatabase;   //2
        int a=0;
        while(a<q)                        //0<3
        {
            boolean gh = getvalue.exists(Integer.parseInt(jTable1.getValueAt(a, 0).toString()));
            if(gh!=false)          //0<1
            {
                try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);
                    try
                    {
                        String query = "Update `items` set itemname=?,price=? where sno=?";
                        String We = new String();
                        PreparedStatement obj = myconnection.prepareStatement(query);
                        obj.setString(1, jTable1.getValueAt(a,1).toString());
                        obj.setString(2, jTable1.getValueAt(a,2).toString());
                        obj.setString(3, jTable1.getValueAt(a,0).toString());
                        //System.out.println("Query Update : "+obj.toString());
                        System.out.println("applying update for sno : "+jTable1.getValueAt(a,0).toString());
                        if(obj.executeUpdate()>0)
                        {
                            //dashlane.receiptspanelbox.doClick();
                            //dashlane.filljtable9();
                            //JOptionPane.showMessageDialog(this,"Category Saved Successfully");
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "Error in Saving the Category");
                        }
                    }
                    catch(Exception e)
                    {
                        System.out.println(5);
                        JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                }
            }
            else
            {
                try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);
                    try
                    {
                        String query = "INSERT INTO `items`(`itemname`, `price`, `id`, `recieptnumber`) VALUES (?,?,?,?)";
                        PreparedStatement obj = myconnection.prepareStatement(query);
                        obj.setString(1, jTable1.getValueAt(a,1).toString());
                        obj.setString(2, jTable1.getValueAt(a,2).toString());
                        obj.setString(3, dashlane.idnumber);
                        obj.setString(4, sno.getText());
                        System.out.println("applying Insert for sno : "+jTable1.getValueAt(a,0).toString());
                        //System.out.println("Query : "+obj.toString());
                        if(obj.executeUpdate()>0)
                        {
                            //JOptionPane.showMessageDialog(this,"Category Saved Successfully");
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "Error in Saving the Category");
                        }
                    }
                    catch(Exception e)
                    {
                        JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                }
            }
            a++;
        }
            try
                {
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);
                    try
                    {
                        String query = "UPDATE `receipts` SET `price`=? WHERE `sno`=?";
                        PreparedStatement obj = myconnection.prepareStatement(query);
                        obj.setString(1, totalprice.getText());
                        obj.setString(2, sno.getText());
                        //System.out.println("Query Update : "+obj.toString());
                        //System.out.println("applying update for sno : "+jTable1.getValueAt(a,0).toString());
                        if(obj.executeUpdate()>0)
                        {
                            //JOptionPane.showMessageDialog(this,"Category Saved Successfully");
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "Error in Saving the Category");
                        }
                    }
                    catch(Exception e)
                    {
                        System.out.println(5);
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                }
        
        a=0;
        if(flag!=true)
        {
            this.dispose();
            dashlane.filljtable9();
        }
        flag = false;
    }//GEN-LAST:event_update_btnActionPerformed

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        try
        {
            Connection myconnection = DriverManager.getConnection(PATH+PLACE,USERNAME,PASSWORD);
                try
                {
                    String query = "select * from items where id=? and recieptnumber=?";
                    PreparedStatement mystatement = myconnection.prepareStatement(query);
                    mystatement.setString(1, dashlane.idnumber);
                    mystatement.setString(2, sno.getText());
                    DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
                    ResultSet myresult= mystatement.executeQuery();
                    String sno,itemname,price,currency;
                    if(myresult.next())
                    {
                        mymodel.setRowCount(0);
                        do
                        {   
                            sno = myresult.getString("sno");
                            itemname = myresult.getString("itemname");
                            price = myresult.getString("price");
                            //currency = myresult.getString("currency");
                            mymodel.addRow(new Object[]{sno,itemname,price});
                        }
                        while(myresult.next());
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this, "No User Categories..\nAdd Some Categories..");
                    }
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(this, "Error Due to : "+e.getMessage());
                }
                finally
                {
                    myconnection.close();
                }
        }
        catch(Exception e)
        {
        
        }
    }//GEN-LAST:event_formInternalFrameActivated

    private void delete_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_btnActionPerformed
                try
                {
                    DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
                    Connection myconnection = DriverManager.getConnection(PATH+PLACE, USERNAME, PASSWORD);
                    try
                    {
                        String query = "DELETE FROM `receipts` WHERE sno=?";
                        PreparedStatement obj = myconnection.prepareStatement(query);
                        obj.setString(1, sno.getText());
                        if(obj.executeUpdate()>0)
                        {
                            String query2="DELETE FROM `items` WHERE recieptnumber=?";
                            obj = myconnection.prepareStatement(query2);
                            obj.setString(1, sno.getText());
                            if(obj.executeUpdate()>0)
                            {
                                JOptionPane.showMessageDialog(this,"Receipt Deleted Successfully");
                                dashlane.filljtable9();
                                this.dispose();
                            }
                            //mymodel.removeRow(jTable1.getSelectedRow());
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "Error in Deleting the Receipt");
                        }
                    }
                    catch(Exception e)
                    {
                        System.out.println(3);
                        JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                    }
                    finally
                    {
                        myconnection.close();
                    }
                }
                catch(Exception e)
                {
                    System.out.println(4);
                    JOptionPane.showMessageDialog(null, "Error Due to : "+e.getMessage());
                }
    }//GEN-LAST:event_delete_btnActionPerformed

    public void printComponenet(Component component){
  PrinterJob pj = PrinterJob.getPrinterJob();
  pj.setJobName(" Print Component ");

  pj.setPrintable (new Printable() {    
    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
        if (pageIndex > 0) { /* We have only one page, and 'page' is zero-based */
        return NO_SUCH_PAGE;
        }

        // get the bounds of the component
        Dimension dim = jPanel1.getSize();
        double cHeight = dim.getHeight();
        double cWidth = dim.getWidth();

        // get the bounds of the printable area
        double pHeight = pageFormat.getImageableHeight();
        double pWidth = pageFormat.getImageableWidth();

        double pXStart = pageFormat.getImageableX();
        double pYStart = pageFormat.getImageableY();

        double xRatio = pWidth / cWidth;
        double yRatio = pHeight / cHeight;


        Graphics2D g2 = (Graphics2D) graphics;
        g2.translate(pXStart, pYStart);
        g2.scale(xRatio, yRatio);
        jPanel1.paint(g2);

        return Printable.PAGE_EXISTS;
    }
  });
  if (pj.printDialog() == false)
  return;

  try {
        pj.print();
        JOptionPane.showMessageDialog(this, "Printed Successfully");
        printbutton.setVisible(true);
        delete_btn.setVisible(true);
        update_btn.setVisible(true);
  } catch (PrinterException ex) {
        // handle exception
  }
    printbutton.setVisible(true);
    delete_btn.setVisible(true);
    update_btn.setVisible(true);
}
    
    private void printbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printbuttonActionPerformed
        printbutton.setVisible(false);
        delete_btn.setVisible(false);
        update_btn.setVisible(false);
        printComponenet(jPanel1);
    }//GEN-LAST:event_printbuttonActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int total = counttotal();
        totalprice.setText(String.valueOf(total));
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseMoved

    }//GEN-LAST:event_jTable1MouseMoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextField currency;
    public static javax.swing.JLabel date;
    private javax.swing.JButton delete_btn;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    public static javax.swing.JTextField place;
    private javax.swing.JButton printbutton;
    public static javax.swing.JLabel sno;
    public static javax.swing.JLabel topcardname;
    public static javax.swing.JLabel totalprice;
    private javax.swing.JButton update_btn;
    // End of variables declaration//GEN-END:variables

    
}
